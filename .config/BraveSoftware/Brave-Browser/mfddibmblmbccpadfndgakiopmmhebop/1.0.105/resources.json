[{"name":"1x1.gif","aliases":["1x1-transparent.gif"],"kind":{"mime":"image/gif"},"content":"R0lGODlhAQABAIAAAP///////yH5BAEKAAEALAAAAAABAAEAAAICTAEAOw=="},{"name":"2x2.png","aliases":["2x2-transparent.png"],"kind":{"mime":"image/png"},"content":"iVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAYAAABytg0kAAAAC0lEQVQI12NgQAcAABIAAe+JVKQAAAAASUVORK5CYII="},{"name":"3x2.png","aliases":["3x2-transparent.png"],"kind":{"mime":"image/png"},"content":"iVBORw0KGgoAAAANSUhEUgAAAAMAAAACCAYAAACddGYaAAAAC0lEQVQI12NgwAUAABoAASRETuUAAAAASUVORK5CYII="},{"name":"32x32.png","aliases":["32x32-transparent.png"],"kind":{"mime":"image/png"},"content":"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGklEQVRYw+3BAQEAAACCIP+vbkhAAQAAAO8GECAAAZf3V9cAAAAASUVORK5CYII="},{"name":"amazon_ads.js","aliases":["amazon-adsystem.com/aax2/amzn_ads.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBpZiAoIGFtem5hZHMgKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgdmFyIHcgPSB3aW5kb3c7CiAgICB2YXIgbm9vcGZuID0gZnVuY3Rpb24oKSB7CiAgICAgICAgOwogICAgfS5iaW5kKCk7CiAgICB2YXIgYW16bmFkcyA9IHsKICAgICAgICBhcHBlbmRTY3JpcHRUYWc6IG5vb3BmbiwKICAgICAgICBhcHBlbmRUYXJnZXRpbmdUb0FkU2VydmVyVXJsOiBub29wZm4sCiAgICAgICAgYXBwZW5kVGFyZ2V0aW5nVG9RdWVyeVN0cmluZzogbm9vcGZuLAogICAgICAgIGNsZWFyVGFyZ2V0aW5nRnJvbUdQVEFzeW5jOiBub29wZm4sCiAgICAgICAgZG9BbGxUYXNrczogbm9vcGZuLAogICAgICAgIGRvR2V0QWRzQXN5bmM6IG5vb3BmbiwKICAgICAgICBkb1Rhc2s6IG5vb3BmbiwKICAgICAgICBkZXRlY3RJZnJhbWVBbmRHZXRVUkw6IG5vb3BmbiwKICAgICAgICBnZXRBZHM6IG5vb3BmbiwKICAgICAgICBnZXRBZHNBc3luYzogbm9vcGZuLAogICAgICAgIGdldEFkRm9yU2xvdDogbm9vcGZuLAogICAgICAgIGdldEFkc0NhbGxiYWNrOiBub29wZm4sCiAgICAgICAgZ2V0RGlzcGxheUFkczogbm9vcGZuLAogICAgICAgIGdldERpc3BsYXlBZHNBc3luYzogbm9vcGZuLAogICAgICAgIGdldERpc3BsYXlBZHNDYWxsYmFjazogbm9vcGZuLAogICAgICAgIGdldEtleXM6IG5vb3BmbiwKICAgICAgICBnZXRSZWZlcnJlclVSTDogbm9vcGZuLAogICAgICAgIGdldFNjcmlwdFNvdXJjZTogbm9vcGZuLAogICAgICAgIGdldFRhcmdldGluZzogbm9vcGZuLAogICAgICAgIGdldFRva2Vuczogbm9vcGZuLAogICAgICAgIGdldFZhbGlkTWlsbGlzZWNvbmRzOiBub29wZm4sCiAgICAgICAgZ2V0VmlkZW9BZHM6IG5vb3BmbiwKICAgICAgICBnZXRWaWRlb0Fkc0FzeW5jOiBub29wZm4sCiAgICAgICAgZ2V0VmlkZW9BZHNDYWxsYmFjazogbm9vcGZuLAogICAgICAgIGhhbmRsZUNhbGxCYWNrOiBub29wZm4sCiAgICAgICAgaGFzQWRzOiBub29wZm4sCiAgICAgICAgcmVuZGVyQWQ6IG5vb3BmbiwKICAgICAgICBzYXZlQWRzOiBub29wZm4sCiAgICAgICAgc2V0VGFyZ2V0aW5nOiBub29wZm4sCiAgICAgICAgc2V0VGFyZ2V0aW5nRm9yR1BUQXN5bmM6IG5vb3BmbiwKICAgICAgICBzZXRUYXJnZXRpbmdGb3JHUFRTeW5jOiBub29wZm4sCiAgICAgICAgdHJ5R2V0QWRzQXN5bmM6IG5vb3BmbiwKICAgICAgICB1cGRhdGVBZHM6IG5vb3BmbgogICAgfTsKICAgIHcuYW16bmFkcyA9IGFtem5hZHM7CiAgICB3LmFtem5fYWRzID0gdy5hbXpuX2FkcyB8fCBub29wZm47CiAgICB3LmFheF93cml0ZSA9IHcuYWF4X3dyaXRlIHx8IG5vb3BmbjsKICAgIHcuYWF4X3JlbmRlcl9hZCA9IHcuYWF4X3JlbmRlcl9hZCB8fCBub29wZm47Cn0pKCk7Cg=="},{"name":"amazon_apstag.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgovLyBodHRwczovL3d3dy5yZWRkaXQuY29tL3IvdUJsb2NrT3JpZ2luL2NvbW1lbnRzL2doanFwaC8KLy8gaHR0cHM6Ly9naXRodWIuY29tL05hbm9NZW93L1F1aWNrUmVwb3J0cy9pc3N1ZXMvMzcxNwovLyBodHRwczovL3d3dy5yZWRkaXQuY29tL3IvdUJsb2NrT3JpZ2luL2NvbW1lbnRzL3F5eDdlbi8KCi8vIGh0dHBzOi8vc2VhcmNoZm94Lm9yZy9tb3ppbGxhLWNlbnRyYWwvc291cmNlL2Jyb3dzZXIvZXh0ZW5zaW9ucy93ZWJjb21wYXQvc2hpbXMvYXBzdGFnLmpzCi8vICAgSW1wb3J0IHF1ZXVlLXJlbGF0ZWQgaW5pdGlhbGl6YXRpb24gY29kZS4KCihmdW5jdGlvbigpIHsKICAgICd1c2Ugc3RyaWN0JzsKICAgIGNvbnN0IHcgPSB3aW5kb3c7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgICAgICA7IC8vIGpzaGludCBpZ25vcmU6bGluZQogICAgfS5iaW5kKCk7CiAgICBjb25zdCBfUSA9IHcuYXBzdGFnICYmIHcuYXBzdGFnLl9RIHx8IFtdOwogICAgY29uc3QgYXBzdGFnID0gewogICAgICAgIF9RLAogICAgICAgIGZldGNoQmlkczogZnVuY3Rpb24oYSwgYikgewogICAgICAgICAgICBpZiAoIHR5cGVvZiBiID09PSAnZnVuY3Rpb24nICkgewogICAgICAgICAgICAgICAgYihbXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGluaXQ6IG5vb3BmbiwKICAgICAgICBzZXREaXNwbGF5Qmlkczogbm9vcGZuLAogICAgICAgIHRhcmdldGluZ0tleXM6IG5vb3BmbiwKICAgIH07CiAgICB3LmFwc3RhZyA9IGFwc3RhZzsKICAgIF9RLnB1c2ggPSBmdW5jdGlvbihwcmVmaXgsIGFyZ3MpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBzd2l0Y2ggKHByZWZpeCkgewogICAgICAgICAgICBjYXNlICdmJzoKICAgICAgICAgICAgICAgIGFwc3RhZy5mZXRjaEJpZHMoLi4uYXJncyk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgY29uc29sZS50cmFjZShlKTsKICAgICAgICB9CiAgICB9OwogICAgZm9yICggY29uc3QgY21kIG9mIF9RICkgewogICAgICAgIF9RLnB1c2goY21kKTsKICAgIH0KfSkoKTsK"},{"name":"ampproject_v0.js","aliases":["ampproject.org/v0.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBoZWFkID0gZG9jdW1lbnQuaGVhZDsKICAgIGlmICggIWhlYWQgKSB7IHJldHVybjsgfQogICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOwogICAgc3R5bGUudGV4dENvbnRlbnQgPSBbCiAgICAgICAgJ2JvZHkgeycsCiAgICAgICAgJyAgYW5pbWF0aW9uOiBub25lICFpbXBvcnRhbnQ7JywKICAgICAgICAnICBvdmVyZmxvdzogdW5zZXQgIWltcG9ydGFudDsnLAogICAgICAgICd9JwogICAgXS5qb2luKCdcbicpOwogICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7Cn0pKCk7Cg=="},{"name":"chartbeat.js","aliases":["static.chartbeat.com/chartbeat.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICB3aW5kb3cucFNVUEVSRkxZID0gewogICAgICAgIGFjdGl2aXR5OiBub29wZm4sCiAgICAgICAgdmlydHVhbFBhZ2U6IG5vb3BmbgogICAgfTsKICAgIGZvciAoIGNvbnN0IGhpZGVyIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlW2lkXj1jaGFydGJlYXQtZmxpY2tlci1jb250cm9sXScpICkgewogICAgICAgIGhpZGVyLnJlbW92ZSgpOwogICAgfQp9KSgpOwo="},{"name":"doubleclick_instream_ad_status.js","aliases":["doubleclick.net/instream/ad_status.js"],"kind":{"mime":"application/javascript"},"content":"d2luZG93Lmdvb2dsZV9hZF9zdGF0dXMgPSAxOwo="},{"name":"empty","aliases":[],"kind":{"mime":"application/octet-stream"},"content":""},{"name":"fingerprint2.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxNC1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgovLyBSZWZlcmVuY2U6Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9maW5nZXJwcmludGpzL2ZpbmdlcnByaW50anMvdHJlZS92MgoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwogICAgY29uc3QgaGV4MzIgPSBsZW4gPT4gewogICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikKICAgICAgICAgICAgLnRvU3RyaW5nKDE2KQogICAgICAgICAgICAuc2xpY2UoLWxlbikKICAgICAgICAgICAgLnBhZFN0YXJ0KGxlbiwgJzAnKTsKICAgIH07CiAgICBjb25zdCBicm93c2VySWQgPSBgJHtoZXgzMig4KX0ke2hleDMyKDgpfSR7aGV4MzIoOCl9JHtoZXgzMig4KX1gOwogICAgY29uc3QgZnAyID0gZnVuY3Rpb24oKXt9OwogICAgZnAyLmdldCA9IGZ1bmN0aW9uKG9wdHMsIGNiKSB7CiAgICAgICAgaWYgKCAhY2IgICkgeyBjYiA9IG9wdHM7IH0KICAgICAgICBzZXRUaW1lb3V0KCggKSA9PiB7IGNiKFtdKTsgfSwgMSk7CiAgICB9OwogICAgZnAyLmdldFByb21pc2UgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTsKICAgIH07CiAgICBmcDIuZ2V0VjE4ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGJyb3dzZXJJZDsKICAgIH07CiAgICBmcDIueDY0aGFzaDEyOCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBicm93c2VySWQ7CiAgICB9OwogICAgZnAyLnByb3RvdHlwZSA9IHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKG9wdHMsIGNiKSB7CiAgICAgICAgICAgIGlmICggIWNiICApIHsgY2IgPSBvcHRzOyB9CiAgICAgICAgICAgIHNldFRpbWVvdXQoKCApID0+IHsgY2IoYnJvd3NlcklkLCBbXSk7IH0sIDEpOwogICAgICAgIH0sCiAgICB9OwogICAgc2VsZi5GaW5nZXJwcmludDIgPSBmcDI7Cn0pKCk7Cg=="},{"name":"fingerprint3.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAyMi1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCB2aXNpdG9ySWQgPSAoKCApID0+IHsKICAgICAgICBsZXQgaWQgPSAnJzsKICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCA4OyBpKysgKSB7CiAgICAgICAgICAgIGlkICs9IChNYXRoLnJhbmRvbSgpICogMHgxMDAwMCArIDB4MTAwMCB8IDApLnRvU3RyaW5nKDE2KS5zbGljZSgtNCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBpZDsKICAgIH0pKCk7CiAgICBjb25zdCBGaW5nZXJwcmludEpTID0gY2xhc3MgewogICAgICAgIHN0YXRpYyBoYXNoQ29tcG9uZW50cygpIHsKICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3JJZDsKICAgICAgICB9CiAgICAgICAgc3RhdGljIGxvYWQoKSB7CiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEZpbmdlcnByaW50SlMoKSk7CiAgICAgICAgfQogICAgICAgIGdldCgpIHsKICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7CiAgICAgICAgICAgICAgICB2aXNpdG9ySWQsCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH07CiAgICB3aW5kb3cuRmluZ2VycHJpbnRKUyA9IEZpbmdlcnByaW50SlM7Cn0pKCk7Cg=="},{"name":"google-analytics_analytics.js","aliases":["google-analytics.com/analytics.js","googletagmanager_gtm.js","googletagmanager.com/gtm.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICAvLyBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9hbmFseXRpY3MvZGV2Z3VpZGVzL2NvbGxlY3Rpb24vYW5hbHl0aWNzanMvCiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICAvLwogICAgY29uc3QgVHJhY2tlciA9IGZ1bmN0aW9uKCkgewogICAgfTsKICAgIGNvbnN0IHAgPSBUcmFja2VyLnByb3RvdHlwZTsKICAgIHAuZ2V0ID0gbm9vcGZuOwogICAgcC5zZXQgPSBub29wZm47CiAgICBwLnNlbmQgPSBub29wZm47CiAgICAvLwogICAgY29uc3QgdyA9IHdpbmRvdzsKICAgIGNvbnN0IGdhTmFtZSA9IHcuR29vZ2xlQW5hbHl0aWNzT2JqZWN0IHx8ICdnYSc7CiAgICBjb25zdCBnYVF1ZXVlID0gd1tnYU5hbWVdOwogICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3VCbG9ja09yaWdpbi91QXNzZXRzL3B1bGwvNDExNQogICAgY29uc3QgZ2EgPSBmdW5jdGlvbigpIHsKICAgICAgICBjb25zdCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICAgIGlmICggbGVuID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICBjb25zdCBhcmdzID0gQXJyYXkuZnJvbShhcmd1bWVudHMpOwogICAgICAgIGxldCBmbjsKICAgICAgICBsZXQgYSA9IGFyZ3NbbGVuLTFdOwogICAgICAgIGlmICggYSBpbnN0YW5jZW9mIE9iamVjdCAmJiBhLmhpdENhbGxiYWNrIGluc3RhbmNlb2YgRnVuY3Rpb24gKSB7CiAgICAgICAgICAgIGZuID0gYS5oaXRDYWxsYmFjazsKICAgICAgICB9IGVsc2UgaWYgKCBhIGluc3RhbmNlb2YgRnVuY3Rpb24gKSB7CiAgICAgICAgICAgIGZuID0gKCApID0+IHsgYShnYS5jcmVhdGUoKSk7IH07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc3QgcG9zID0gYXJncy5pbmRleE9mKCdoaXRDYWxsYmFjaycpOwogICAgICAgICAgICBpZiAoIHBvcyAhPT0gLTEgJiYgYXJnc1twb3MrMV0gaW5zdGFuY2VvZiBGdW5jdGlvbiApIHsKICAgICAgICAgICAgICAgIGZuID0gYXJnc1twb3MrMV07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCBmbiBpbnN0YW5jZW9mIEZ1bmN0aW9uID09PSBmYWxzZSApIHsgcmV0dXJuOyB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZm4oKTsKICAgICAgICB9IGNhdGNoIChleCkgewogICAgICAgIH0KICAgIH07CiAgICBnYS5jcmVhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gbmV3IFRyYWNrZXIoKTsKICAgIH07CiAgICBnYS5nZXRCeU5hbWUgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gbmV3IFRyYWNrZXIoKTsKICAgIH07CiAgICBnYS5nZXRBbGwgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gW25ldyBUcmFja2VyKCldOwogICAgfTsKICAgIGdhLnJlbW92ZSA9IG5vb3BmbjsKICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS91QmxvY2tPcmlnaW4vdUFzc2V0cy9pc3N1ZXMvMjEwNwogICAgZ2EubG9hZGVkID0gdHJ1ZTsKICAgIHdbZ2FOYW1lXSA9IGdhOwogICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrL2lzc3Vlcy8zMDc1CiAgICBjb25zdCBkbCA9IHcuZGF0YUxheWVyOwogICAgaWYgKCBkbCBpbnN0YW5jZW9mIE9iamVjdCApIHsKICAgICAgICBpZiAoIGRsLmhpZGUgaW5zdGFuY2VvZiBPYmplY3QgJiYgdHlwZW9mIGRsLmhpZGUuZW5kID09PSAnZnVuY3Rpb24nICkgewogICAgICAgICAgICBkbC5oaWRlLmVuZCgpOwogICAgICAgICAgICBkbC5oaWRlLmVuZCA9ICgpPT57fTsKICAgICAgICB9CiAgICAgICAgaWYgKCB0eXBlb2YgZGwucHVzaCA9PT0gJ2Z1bmN0aW9uJyApIHsKICAgICAgICAgICAgY29uc3QgZG9DYWxsYmFjayA9IGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICAgICAgICAgIGlmICggaXRlbSBpbnN0YW5jZW9mIE9iamVjdCA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgaXRlbS5ldmVudENhbGxiYWNrICE9PSAnZnVuY3Rpb24nICkgeyByZXR1cm47IH0KICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoaXRlbS5ldmVudENhbGxiYWNrLCAxKTsKICAgICAgICAgICAgICAgIGl0ZW0uZXZlbnRDYWxsYmFjayA9ICgpPT57fTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgZGwucHVzaCA9IG5ldyBQcm94eShkbC5wdXNoLCB7CiAgICAgICAgICAgICAgICBhcHBseTogZnVuY3Rpb24odGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSB7CiAgICAgICAgICAgICAgICAgICAgZG9DYWxsYmFjayhhcmdzWzBdKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaWYgKCBBcnJheS5pc0FycmF5KGRsKSApIHsKICAgICAgICAgICAgICAgIGNvbnN0IHEgPSBkbC5zbGljZSgpOwogICAgICAgICAgICAgICAgZm9yICggY29uc3QgaXRlbSBvZiBxICkgewogICAgICAgICAgICAgICAgICAgIGRvQ2FsbGJhY2soaXRlbSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICAvLyBlbXB0eSBnYSBxdWV1ZQogICAgaWYgKCBnYVF1ZXVlIGluc3RhbmNlb2YgRnVuY3Rpb24gJiYgQXJyYXkuaXNBcnJheShnYVF1ZXVlLnEpICkgewogICAgICAgIGNvbnN0IHEgPSBnYVF1ZXVlLnEuc2xpY2UoKTsKICAgICAgICBnYVF1ZXVlLnEubGVuZ3RoID0gMDsKICAgICAgICBmb3IgKCBjb25zdCBlbnRyeSBvZiBxICkgewogICAgICAgICAgICBnYSguLi5lbnRyeSk7CiAgICAgICAgfQogICAgfQp9KSgpOwo="},{"name":"google-analytics_cx_api.js","aliases":["google-analytics.com/cx/api.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICB3aW5kb3cuY3hBcGkgPSB7CiAgICAgICAgY2hvb3NlVmFyaWF0aW9uOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgfSwKICAgICAgICBnZXRDaG9zZW5WYXJpYXRpb246IG5vb3BmbiwKICAgICAgICBzZXRBbGxvd0hhc2g6IG5vb3BmbiwKICAgICAgICBzZXRDaG9zZW5WYXJpYXRpb246IG5vb3BmbiwKICAgICAgICBzZXRDb29raWVQYXRoOiBub29wZm4sCiAgICAgICAgc2V0RG9tYWluTmFtZTogbm9vcGZuCiAgICAgICAgfTsKfSkoKTsK"},{"name":"google-analytics_ga.js","aliases":["google-analytics.com/ga.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICAvLwogICAgY29uc3QgR2FxID0gZnVuY3Rpb24oKSB7CiAgICB9OwogICAgR2FxLnByb3RvdHlwZS5OYSA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuTyA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuU2EgPSBub29wZm47CiAgICBHYXEucHJvdG90eXBlLlRhID0gbm9vcGZuOwogICAgR2FxLnByb3RvdHlwZS5WYSA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuX2NyZWF0ZUFzeW5jVHJhY2tlciA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuX2dldEFzeW5jVHJhY2tlciA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUuX2dldFBsdWdpbiA9IG5vb3BmbjsKICAgIEdhcS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGEpIHsKICAgICAgICBpZiAoIHR5cGVvZiBhID09PSAnZnVuY3Rpb24nICkgewogICAgICAgICAgICBhKCk7IHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKCBBcnJheS5pc0FycmF5KGEpID09PSBmYWxzZSApIHsgcmV0dXJuOyB9CiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2dhanMvbWV0aG9kcy9nYUpTQXBpRG9tYWluRGlyZWN0b3J5I19nYXQuR0FfVHJhY2tlcl8uX2xpbmsKICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdUJsb2NrT3JpZ2luL3VCbG9jay1pc3N1ZXMvaXNzdWVzLzE4MDcKICAgICAgICBpZiAoCiAgICAgICAgICAgIHR5cGVvZiBhWzBdID09PSAnc3RyaW5nJyAmJgogICAgICAgICAgICAvKF58XC4pX2xpbmskLy50ZXN0KGFbMF0pICYmCiAgICAgICAgICAgIHR5cGVvZiBhWzFdID09PSAnc3RyaW5nJwogICAgICAgICkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbihhWzFdKTsKICAgICAgICAgICAgfSBjYXRjaChleCkgewogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb3JoaWxsL3VCbG9jay9pc3N1ZXMvMjE2MgogICAgICAgIGlmICggYVswXSA9PT0gJ19zZXQnICYmIGFbMV0gPT09ICdoaXRDYWxsYmFjaycgJiYgdHlwZW9mIGFbMl0gPT09ICdmdW5jdGlvbicgKSB7CiAgICAgICAgICAgIGFbMl0oKTsKICAgICAgICB9CiAgICB9OwogICAgLy8KICAgIGNvbnN0IHRyYWNrZXIgPSAoZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3Qgb3V0ID0ge307CiAgICAgICAgY29uc3QgYXBpID0gWwogICAgICAgICAgICAnX2FkZElnbm9yZWRPcmdhbmljIF9hZGRJZ25vcmVkUmVmIF9hZGRJdGVtIF9hZGRPcmdhbmljJywKICAgICAgICAgICAgJ19hZGRUcmFucyBfY2xlYXJJZ25vcmVkT3JnYW5pYyBfY2xlYXJJZ25vcmVkUmVmIF9jbGVhck9yZ2FuaWMnLAogICAgICAgICAgICAnX2Nvb2tpZVBhdGhDb3B5IF9kZWxldGVDdXN0b21WYXIgX2dldE5hbWUgX3NldEFjY291bnQnLAogICAgICAgICAgICAnX2dldEFjY291bnQgX2dldENsaWVudEluZm8gX2dldERldGVjdEZsYXNoIF9nZXREZXRlY3RUaXRsZScsCiAgICAgICAgICAgICdfZ2V0TGlua2VyVXJsIF9nZXRMb2NhbEdpZlBhdGggX2dldFNlcnZpY2VNb2RlIF9nZXRWZXJzaW9uJywKICAgICAgICAgICAgJ19nZXRWaXNpdG9yQ3VzdG9tVmFyIF9pbml0RGF0YSBfbGlua0J5UG9zdCcsCiAgICAgICAgICAgICdfc2V0QWxsb3dBbmNob3IgX3NldEFsbG93SGFzaCBfc2V0QWxsb3dMaW5rZXIgX3NldENhbXBDb250ZW50S2V5JywKICAgICAgICAgICAgJ19zZXRDYW1wTWVkaXVtS2V5IF9zZXRDYW1wTmFtZUtleSBfc2V0Q2FtcE5PS2V5IF9zZXRDYW1wU291cmNlS2V5JywKICAgICAgICAgICAgJ19zZXRDYW1wVGVybUtleSBfc2V0Q2FtcGFpZ25Db29raWVUaW1lb3V0IF9zZXRDYW1wYWlnblRyYWNrIF9zZXRDbGllbnRJbmZvJywKICAgICAgICAgICAgJ19zZXRDb29raWVQYXRoIF9zZXRDb29raWVQZXJzaXN0ZW5jZSBfc2V0Q29va2llVGltZW91dCBfc2V0Q3VzdG9tVmFyJywKICAgICAgICAgICAgJ19zZXREZXRlY3RGbGFzaCBfc2V0RGV0ZWN0VGl0bGUgX3NldERvbWFpbk5hbWUgX3NldExvY2FsR2lmUGF0aCcsCiAgICAgICAgICAgICdfc2V0TG9jYWxSZW1vdGVTZXJ2ZXJNb2RlIF9zZXRMb2NhbFNlcnZlck1vZGUgX3NldFJlZmVycmVyT3ZlcnJpZGUgX3NldFJlbW90ZVNlcnZlck1vZGUnLAogICAgICAgICAgICAnX3NldFNhbXBsZVJhdGUgX3NldFNlc3Npb25UaW1lb3V0IF9zZXRTaXRlU3BlZWRTYW1wbGVSYXRlIF9zZXRTZXNzaW9uQ29va2llVGltZW91dCcsCiAgICAgICAgICAgICdfc2V0VmFyIF9zZXRWaXNpdG9yQ29va2llVGltZW91dCBfdHJhY2tFdmVudCBfdHJhY2tQYWdlTG9hZFRpbWUnLAogICAgICAgICAgICAnX3RyYWNrUGFnZXZpZXcgX3RyYWNrU29jaWFsIF90cmFja1RpbWluZyBfdHJhY2tUcmFucycsCiAgICAgICAgICAgICdfdmlzaXRDb2RlJwogICAgICAgIF0uam9pbignICcpLnNwbGl0KC9ccysvKTsKICAgICAgICBmb3IgKCBjb25zdCBtZXRob2Qgb2YgYXBpICkgewogICAgICAgICAgICBvdXRbbWV0aG9kXSA9IG5vb3BmbjsKICAgICAgICB9CiAgICAgICAgb3V0Ll9nZXRMaW5rZXJVcmwgPSBmdW5jdGlvbihhKSB7CiAgICAgICAgICAgIHJldHVybiBhOwogICAgICAgIH07CiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0FkZ3VhcmRUZWFtL1NjcmlwdGxldHMvaXNzdWVzLzE1NAogICAgICAgIG91dC5fbGluayA9IGZ1bmN0aW9uKGEpIHsKICAgICAgICAgICAgaWYgKCB0eXBlb2YgYSAhPT0gJ3N0cmluZycgKSB7IHJldHVybjsgfQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbihhKTsKICAgICAgICAgICAgfSBjYXRjaChleCkgewogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICByZXR1cm4gb3V0OwogICAgfSkoKTsKICAgIC8vCiAgICBjb25zdCBHYXQgPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBHYXQucHJvdG90eXBlLl9hbm9ueW1pemVJUCA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUuX2NyZWF0ZVRyYWNrZXIgPSBub29wZm47CiAgICBHYXQucHJvdG90eXBlLl9mb3JjZVNTTCA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUuX2dldFBsdWdpbiA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUuX2dldFRyYWNrZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdHJhY2tlcjsKICAgIH07CiAgICBHYXQucHJvdG90eXBlLl9nZXRUcmFja2VyQnlOYW1lID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRyYWNrZXI7CiAgICB9OwogICAgR2F0LnByb3RvdHlwZS5fZ2V0VHJhY2tlcnMgPSBub29wZm47CiAgICBHYXQucHJvdG90eXBlLmFhID0gbm9vcGZuOwogICAgR2F0LnByb3RvdHlwZS5hYiA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUuaGIgPSBub29wZm47CiAgICBHYXQucHJvdG90eXBlLmxhID0gbm9vcGZuOwogICAgR2F0LnByb3RvdHlwZS5vYSA9IG5vb3BmbjsKICAgIEdhdC5wcm90b3R5cGUucGEgPSBub29wZm47CiAgICBHYXQucHJvdG90eXBlLnUgPSBub29wZm47CiAgICBjb25zdCBnYXQgPSBuZXcgR2F0KCk7CiAgICB3aW5kb3cuX2dhdCA9IGdhdDsKICAgIC8vCiAgICBjb25zdCBnYXEgPSBuZXcgR2FxKCk7CiAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgYWEgPSB3aW5kb3cuX2dhcSB8fCBbXTsKICAgICAgICBpZiAoIEFycmF5LmlzQXJyYXkoYWEpICkgewogICAgICAgICAgICB3aGlsZSAoIGFhWzBdICkgewogICAgICAgICAgICAgICAgZ2FxLnB1c2goYWEuc2hpZnQoKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KSgpOwogICAgd2luZG93Ll9nYXEgPSBnYXEucWYgPSBnYXE7Cn0pKCk7Cg=="},{"name":"google-analytics_inpage_linkid.js","aliases":["google-analytics.com/inpage_linkid.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB3aW5kb3cuX2dhcSA9IHdpbmRvdy5fZ2FxIHx8IHsKICAgICAgICBwdXNoOiBmdW5jdGlvbigpIHsKICAgICAgICB9CiAgICB9Owp9KSgpOwo="},{"name":"google-ima.js","aliases":["google-ima3"],"kind":{"mime":"application/javascript"},"content":""},{"name":"googlesyndication_adsbygoogle.js","aliases":["googlesyndication.com/adsbygoogle.js","googlesyndication-adsbygoogle"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBpbml0ID0gKCApID0+IHsKICAgICAgICB3aW5kb3cuYWRzYnlnb29nbGUgPSB7CiAgICAgICAgICAgIGxvYWRlZDogdHJ1ZSwKICAgICAgICAgICAgcHVzaDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGNvbnN0IHBocyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hZHNieWdvb2dsZScpOwogICAgICAgIGNvbnN0IGNzcyA9ICdoZWlnaHQ6MXB4IWltcG9ydGFudDttYXgtaGVpZ2h0OjFweCFpbXBvcnRhbnQ7bWF4LXdpZHRoOjFweCFpbXBvcnRhbnQ7d2lkdGg6MXB4IWltcG9ydGFudDsnOwogICAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHBocy5sZW5ndGg7IGkrKyApIHsKICAgICAgICAgICAgY29uc3QgaWQgPSBgYXN3aWZ0XyR7aX1gOwogICAgICAgICAgICBpZiAoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGlmcmFtZSMke2lkfWApICE9PSBudWxsICkgeyBjb250aW51ZTsgfQogICAgICAgICAgICBjb25zdCBmciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpOwogICAgICAgICAgICBmci5pZCA9IGlkOwogICAgICAgICAgICBmci5zdHlsZSA9IGNzczsKICAgICAgICAgICAgY29uc3QgY2ZyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7CiAgICAgICAgICAgIGNmci5pZCA9IGBnb29nbGVfYWRzX2ZyYW1lJHtpfWA7CiAgICAgICAgICAgIGZyLmFwcGVuZENoaWxkKGNmcik7CiAgICAgICAgICAgIGNvbnN0IHBoID0gcGhzW2ldOwogICAgICAgICAgICBwaC5hcHBlbmRDaGlsZChmcik7CiAgICAgICAgICAgIHBoLnNldEF0dHJpYnV0ZSgnZGF0YS1hZHNieWdvb2dsZS1zdGF0dXMnLCAnZG9uZScpOwogICAgICAgIH0KICAgIH07CiAgICBpZiAoCiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFkc2J5Z29vZ2xlJykubGVuZ3RoID09PSAwICYmCiAgICAgICAgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnCiAgICApIHsKICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGluaXQsIHsgb25jZTogdHJ1ZSB9KTsKICAgIH0gZWxzZSB7CiAgICAgICAgaW5pdCgpOwogICAgfQp9KSgpOwoKLyoKcGFnZWFkMi5nb29nbGVzeW5kaWNhdGlvbi5jb20vcGFnZWFkL2pzL2Fkc2J5Z29vZ2xlLmpzLGFkc2J5Z29vZ2xlLXBsYWNlaG9sZGVyLGFkc2J5Z29vZ2xlU3RhdHVzLGdvb2dsZV9hZF9jaGFubmVsLGdvb2dsZV9hZF9jbGllbnQsZ29vZ2xlX2FkX2Zvcm1hdCxnb29nbGVfYWRfZnJlcXVlbmN5X2hpbnQsZ29vZ2xlX2FkX2hlaWdodCxnb29nbGVfYWRfaG9zdCxnb29nbGVfYWRfaG9zdF9jaGFubmVsLGdvb2dsZV9hZF9tb2RpZmljYXRpb25zLGdvb2dsZV9hZF9yZWdpb24sZ29vZ2xlX2FkX3Jlc2l6YWJsZSxnb29nbGVfYWRfcmVzaXplLGdvb2dsZV9hZF9zZWN0aW9uLGdvb2dsZV9hZF9zZW1hbnRpY19hcmVhLGdvb2dsZV9hZF93aWR0aCxnb29nbGVfYWRicmVha190ZXN0LGdvb2dsZV9hZHNfZnJhbWUsZ29vZ2xlX2Fkc19pZnJhbWUsZ29vZ2xlX2FkdGVzdCxnb29nbGVfYWRtb2JfaW50ZXJzdGl0aWFsX3Nsb3QsZ29vZ2xlX2FkbW9iX3Jld2FyZGVkX3Nsb3QsZ29vZ2xlX2FkbW9iX2Fkc19vbmx5LGdvb2dsZS1hZHNlbnNlLXBsYXRmb3JtLWFjY291bnQsZ29vZ2xlX2Fkc2Vuc2Vfc2V0dGluZ3MsZ29vZ2xlX2FtYV9jb25maWcsZ29vZ2xlLWFtYS1vcmRlci1hc3N1cmFuY2UsZ29vZ2xlX2FtYV9zZXR0aW5ncyxnb29nbGVfYW1hX3N0YXRlLGdvb2dsZV9hcGx0bGFkLGdvb2dsZV9hdWRpb19zZW5zZSxnb29nbGUtYXV0by1wbGFjZWQtcmVhZC1hbG91ZC1wbGF5ZXItcmVzZXJ2ZWQsZ29vZ2xlX2RlYnVnX3BhcmFtcyxnb29nbGVfZnVsbF93aWR0aF9yZXNwb25zaXZlLGdvb2dsZV9mdWxsX3dpZHRoX3Jlc3BvbnNpdmVfYWxsb3dlZCxnb29nbGVfaW1hZ2VfcmVxdWVzdHMsZ29vZ2xlX2pzX2Vycm9ycyxnb29nbGVfanNfcmVwb3J0aW5nX3F1ZXVlLGdvb2dsZV9sb2FkZXJfZmVhdHVyZXNfdXNlZCxnb29nbGVfbGxwLGdvb2dsZV9sb2dnaW5nX3F1ZXVlLGdvb2dsZV9tYXhfYWRfY29udGVudF9yYXRpbmcsZ29vZ2xlX21lYXN1cmVfanNfdGltaW5nLGdvb2dsZV9tbF9yYW5rLGdvb2dsZV9vdmVybGF5cyxnb29nbGVfb3ZlcnJpZGVfZm9ybWF0LGdvb2dsZV9wYWNrYWdlLGdvb2dsZV9wYWdlX3VybCxnb29nbGVfcGVyc2lzdGVudF9zdGF0ZV9hc3luYyxnb29nbGVfcGdiX3JlYWN0aXZlLGdvb2dsZV9wbGFjZW1lbnRfaWQsZ29vZ2xlX3ByZXZfYWRfZm9ybWF0c19ieV9yZWdpb24sZ29vZ2xlX3ByZXZfYWRfc2xvdG5hbWVzX2J5X3JlZ2lvbixnb29nbGVfcmVhY3RpdmVfYWRfZm9ybWF0LGdvb2dsZV9yZWFjdGl2ZV9hZHNfZ2xvYmFsX3N0YXRlLGdvb2dsZV9yZXNpemluZ19oZWlnaHQsZ29vZ2xlX3Jlc2l6aW5nX3dpZHRoLGdvb2dsZV9yZXNwb25zaXZlX2F1dG9fZm9ybWF0LGdvb2dsZV9yZXNwb25zaXZlX2R1bW15X2FkLGdvb2dsZV9yZXNwb25zaXZlX2Zvcm1hdHMsZ29vZ2xlX3Jlc3RyaWN0X2RhdGFfcHJvY2Vzc2luZyxnb29nbGVfcnVtX3Rhc2tfaWRfY291bnRlcixnb29nbGVfc2FmZV9mb3JfcmVzcG9uc2l2ZV9vdmVycmlkZSxnb29nbGVfc2hhZG93X21vZGUsZ29vZ2xlX3NydCxnb29nbGVfdGFnX2Zvcl91bmRlcl9hZ2Vfb2ZfY29uc2VudCxnb29nbGVfdGFnX29yaWdpbixnb29nbGVfdGFnX3BhcnRuZXIsZ29vZ2xlX3RyYWZmaWNfc291cmNlLGdvb2dsZV91bmlxdWVfaWQsZ29vZ2xldGFnCiovCg=="},{"name":"googletagservices_gpt.js","aliases":["googletagservices.com/gpt.js","googletagservices-gpt"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICAvLyBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9kb3VibGVjbGljay1ncHQvcmVmZXJlbmNlCiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH0uYmluZCgpOwogICAgY29uc3Qgbm9vcHRoaXNmbiA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiB0aGlzOwogICAgfTsKICAgIGNvbnN0IG5vb3BudWxsZm4gPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH07CiAgICBjb25zdCBub29wYXJyYXlmbiA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBbXTsKICAgIH07CiAgICBjb25zdCBub29wc3RyZm4gPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gJyc7CiAgICB9OwogICAgLy8KICAgIGNvbnN0IGNvbXBhbmlvbkFkc1NlcnZpY2UgPSB7CiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogbm9vcHRoaXNmbiwKICAgICAgICBlbmFibGVTeW5jTG9hZGluZzogbm9vcGZuLAogICAgICAgIHNldFJlZnJlc2hVbmZpbGxlZFNsb3RzOiBub29wZm4KICAgIH07CiAgICBjb25zdCBjb250ZW50U2VydmljZSA9IHsKICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBub29wdGhpc2ZuLAogICAgICAgIHNldENvbnRlbnQ6IG5vb3BmbgogICAgfTsKICAgIGNvbnN0IFBhc3NiYWNrU2xvdCA9IGZ1bmN0aW9uKCkgewogICAgfTsKICAgIGxldCBwID0gUGFzc2JhY2tTbG90LnByb3RvdHlwZTsKICAgIHAuZGlzcGxheSA9IG5vb3BmbjsKICAgIHAuZ2V0ID0gbm9vcG51bGxmbjsKICAgIHAuc2V0ID0gbm9vcHRoaXNmbjsKICAgIHAuc2V0Q2xpY2tVcmwgPSBub29wdGhpc2ZuOwogICAgcC5zZXRUYWdGb3JDaGlsZERpcmVjdGVkVHJlYXRtZW50ID0gbm9vcHRoaXNmbjsKICAgIHAuc2V0VGFyZ2V0aW5nID0gbm9vcHRoaXNmbjsKICAgIHAudXBkYXRlVGFyZ2V0aW5nRnJvbU1hcCA9IG5vb3B0aGlzZm47CiAgICBjb25zdCBwdWJBZHNTZXJ2aWNlID0gewogICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IG5vb3B0aGlzZm4sCiAgICAgICAgY2xlYXI6IG5vb3BmbiwKICAgICAgICBjbGVhckNhdGVnb3J5RXhjbHVzaW9uczogbm9vcHRoaXNmbiwKICAgICAgICBjbGVhclRhZ0ZvckNoaWxkRGlyZWN0ZWRUcmVhdG1lbnQ6IG5vb3B0aGlzZm4sCiAgICAgICAgY2xlYXJUYXJnZXRpbmc6IG5vb3B0aGlzZm4sCiAgICAgICAgY29sbGFwc2VFbXB0eURpdnM6IG5vb3BmbiwKICAgICAgICBkZWZpbmVPdXRPZlBhZ2VQYXNzYmFjazogZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgUGFzc2JhY2tTbG90KCk7IH0sCiAgICAgICAgZGVmaW5lUGFzc2JhY2s6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IFBhc3NiYWNrU2xvdCgpOyB9LAogICAgICAgIGRpc2FibGVJbml0aWFsTG9hZDogbm9vcGZuLAogICAgICAgIGRpc3BsYXk6IG5vb3BmbiwKICAgICAgICBlbmFibGVBc3luY1JlbmRlcmluZzogbm9vcGZuLAogICAgICAgIGVuYWJsZUxhenlMb2FkOiBub29wZm4sCiAgICAgICAgZW5hYmxlU2luZ2xlUmVxdWVzdDogbm9vcGZuLAogICAgICAgIGVuYWJsZVN5bmNSZW5kZXJpbmc6IG5vb3BmbiwKICAgICAgICBlbmFibGVWaWRlb0Fkczogbm9vcGZuLAogICAgICAgIGdldDogbm9vcG51bGxmbiwKICAgICAgICBnZXRBdHRyaWJ1dGVLZXlzOiBub29wYXJyYXlmbiwKICAgICAgICBnZXRUYXJnZXRpbmc6IG5vb3BhcnJheWZuLAogICAgICAgIGdldFRhcmdldGluZ0tleXM6IG5vb3BhcnJheWZuLAogICAgICAgIGdldFNsb3RzOiBub29wYXJyYXlmbiwKICAgICAgICByZWZyZXNoOiBub29wZm4sCiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogbm9vcGZuLAogICAgICAgIHNldDogbm9vcHRoaXNmbiwKICAgICAgICBzZXRDYXRlZ29yeUV4Y2x1c2lvbjogbm9vcHRoaXNmbiwKICAgICAgICBzZXRDZW50ZXJpbmc6IG5vb3BmbiwKICAgICAgICBzZXRDb29raWVPcHRpb25zOiBub29wdGhpc2ZuLAogICAgICAgIHNldEZvcmNlU2FmZUZyYW1lOiBub29wdGhpc2ZuLAogICAgICAgIHNldExvY2F0aW9uOiBub29wdGhpc2ZuLAogICAgICAgIHNldFB1Ymxpc2hlclByb3ZpZGVkSWQ6IG5vb3B0aGlzZm4sCiAgICAgICAgc2V0UHJpdmFjeVNldHRpbmdzOiBub29wdGhpc2ZuLAogICAgICAgIHNldFJlcXVlc3ROb25QZXJzb25hbGl6ZWRBZHM6IG5vb3B0aGlzZm4sCiAgICAgICAgc2V0U2FmZUZyYW1lQ29uZmlnOiBub29wdGhpc2ZuLAogICAgICAgIHNldFRhZ0ZvckNoaWxkRGlyZWN0ZWRUcmVhdG1lbnQ6IG5vb3B0aGlzZm4sCiAgICAgICAgc2V0VGFyZ2V0aW5nOiBub29wdGhpc2ZuLAogICAgICAgIHNldFZpZGVvQ29udGVudDogbm9vcHRoaXNmbiwKICAgICAgICB1cGRhdGVDb3JyZWxhdG9yOiBub29wZm4KICAgIH07CiAgICBjb25zdCBTaXplTWFwcGluZ0J1aWxkZXIgPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBwID0gU2l6ZU1hcHBpbmdCdWlsZGVyLnByb3RvdHlwZTsKICAgIHAuYWRkU2l6ZSA9IG5vb3B0aGlzZm47CiAgICBwLmJ1aWxkID0gbm9vcG51bGxmbjsKICAgIGNvbnN0IFNsb3QgPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBwID0gU2xvdC5wcm90b3R5cGU7CiAgICBwLmFkZFNlcnZpY2UgPSBub29wdGhpc2ZuOwogICAgcC5jbGVhckNhdGVnb3J5RXhjbHVzaW9ucyA9IG5vb3B0aGlzZm47CiAgICBwLmNsZWFyVGFyZ2V0aW5nID0gbm9vcHRoaXNmbjsKICAgIHAuZGVmaW5lU2l6ZU1hcHBpbmcgPSBub29wdGhpc2ZuOwogICAgcC5nZXQgPSBub29wbnVsbGZuOwogICAgcC5nZXRBZFVuaXRQYXRoID0gbm9vcGFycmF5Zm47CiAgICBwLmdldEF0dHJpYnV0ZUtleXMgPSBub29wYXJyYXlmbjsKICAgIHAuZ2V0Q2F0ZWdvcnlFeGNsdXNpb25zID0gbm9vcGFycmF5Zm47CiAgICBwLmdldERvbUlkID0gbm9vcHN0cmZuOwogICAgcC5nZXRSZXNwb25zZUluZm9ybWF0aW9uID0gbm9vcG51bGxmbjsKICAgIHAuZ2V0U2xvdEVsZW1lbnRJZCA9IG5vb3BzdHJmbjsKICAgIHAuZ2V0U2xvdElkID0gbm9vcHRoaXNmbjsKICAgIHAuZ2V0VGFyZ2V0aW5nID0gbm9vcGFycmF5Zm47CiAgICBwLmdldFRhcmdldGluZ0tleXMgPSBub29wYXJyYXlmbjsKICAgIHAuc2V0ID0gbm9vcHRoaXNmbjsKICAgIHAuc2V0Q2F0ZWdvcnlFeGNsdXNpb24gPSBub29wdGhpc2ZuOwogICAgcC5zZXRDbGlja1VybCA9IG5vb3B0aGlzZm47CiAgICBwLnNldENvbGxhcHNlRW1wdHlEaXYgPSBub29wdGhpc2ZuOwogICAgcC5zZXRUYXJnZXRpbmcgPSBub29wdGhpc2ZuOwogICAgcC51cGRhdGVUYXJnZXRpbmdGcm9tTWFwID0gbm9vcHRoaXNmbjsKICAgIC8vCiAgICBjb25zdCBncHQgPSB3aW5kb3cuZ29vZ2xldGFnIHx8IHt9OwogICAgY29uc3QgY21kID0gZ3B0LmNtZCB8fCBbXTsKICAgIGdwdC5hcGlSZWFkeSA9IHRydWU7CiAgICBncHQuY21kID0gW107CiAgICBncHQuY21kLnB1c2ggPSBmdW5jdGlvbihhKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgYSgpOwogICAgICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgICAgfQogICAgICAgIHJldHVybiAxOwogICAgfTsKICAgIGdwdC5jb21wYW5pb25BZHMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbXBhbmlvbkFkc1NlcnZpY2U7IH07CiAgICBncHQuY29udGVudCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29udGVudFNlcnZpY2U7IH07CiAgICBncHQuZGVmaW5lT3V0T2ZQYWdlU2xvdCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IFNsb3QoKTsgfTsKICAgIGdwdC5kZWZpbmVTbG90ID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgU2xvdCgpOyB9OwogICAgZ3B0LmRlc3Ryb3lTbG90cyA9IG5vb3BmbjsKICAgIGdwdC5kaXNhYmxlUHVibGlzaGVyQ29uc29sZSA9IG5vb3BmbjsKICAgIGdwdC5kaXNwbGF5ID0gbm9vcGZuOwogICAgZ3B0LmVuYWJsZVNlcnZpY2VzID0gbm9vcGZuOwogICAgZ3B0LmdldFZlcnNpb24gPSBub29wc3RyZm47CiAgICBncHQucHViYWRzID0gZnVuY3Rpb24oKSB7IHJldHVybiBwdWJBZHNTZXJ2aWNlOyB9OwogICAgZ3B0LnB1YmFkc1JlYWR5ID0gdHJ1ZTsKICAgIGdwdC5zZXRBZElmcmFtZVRpdGxlID0gbm9vcGZuOwogICAgZ3B0LnNpemVNYXBwaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgU2l6ZU1hcHBpbmdCdWlsZGVyKCk7IH07CiAgICB3aW5kb3cuZ29vZ2xldGFnID0gZ3B0OwogICAgd2hpbGUgKCBjbWQubGVuZ3RoICE9PSAwICkgewogICAgICAgIGdwdC5jbWQucHVzaChjbWQuc2hpZnQoKSk7CiAgICB9Cn0pKCk7Cg=="},{"name":"hd-main.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBsID0ge307CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBjb25zdCBwcm9wcyA9IFsKICAgICAgICAiJGoiLCJBZCIsIkJkIiwiQ2QiLCJEZCIsIkVkIiwiRmQiLCJHZCIsIkhkIiwiSWQiLCJKZCIsIk5qIiwiT2MiLCJQYyIsIlBlIiwKICAgICAgICAiUWMiLCJRZSIsIlJjIiwiUmUiLCJSaSIsIlNjIiwiVGMiLCJVYyIsIlZjIiwiV2MiLCJXZyIsIlhjIiwiWGciLCJZYyIsIllkIiwKICAgICAgICAiYWQiLCJhZSIsImJkIiwiYmYiLCJjZCIsImRkIiwiZWQiLCJlZiIsImVrIiwiZmQiLCJmZyIsImZoIiwiZmsiLCJnZCIsImhkIiwKICAgICAgICAiaWciLCJpaiIsImpkIiwia2QiLCJrZSIsImxkIiwibWQiLCJtaSIsIm5kIiwib2QiLCJvaCIsInBkIiwicGYiLCJxZCIsInJkIiwKICAgICAgICAic2QiLCJ0ZCIsInVkIiwidmQiLCJ3ZCIsIndnIiwieGQiLCJ4aCIsInlkIiwiemQiLAogICAgICAgICIkZCIsIiRlIiwiJGsiLCJBZSIsIkFmIiwiQWoiLCJCZSIsIkNlIiwiRGUiLCJFZSIsIkVrIiwiRW8iLCJFcCIsIkZlIiwiRm8iLAogICAgICAgICJHZSIsIkdoIiwiSGsiLCJJZSIsIklwIiwiSmUiLCJLZSIsIktrIiwiS3EiLCJMZSIsIkxoIiwiTGsiLCJNZSIsIk1tIiwiTmUiLAogICAgICAgICJPZSIsIlBlIiwiUWUiLCJSZSIsIlJwIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJWcCIsIldlIiwiWGQiLCJYZSIsIllkIiwiWWUiLAogICAgICAgICJaZCIsIlplIiwiWmYiLCJaayIsImFlIiwiYWYiLCJhbCIsImJlIiwiYmYiLCJiZyIsImNlIiwiY3AiLCJkZiIsImRpIiwiZWUiLAogICAgICAgICJlZiIsImZlIiwiZmYiLCJnZiIsImdtIiwiaGUiLCJoZiIsImllIiwiamUiLCJqZiIsImtlIiwia2YiLCJrbCIsImxlIiwibGYiLAogICAgICAgICJsayIsIm1mIiwibWciLCJtbiIsIm5mIiwib2UiLCJvZiIsInBlIiwicGYiLCJwZyIsInFlIiwicWYiLCJyZSIsInJmIiwic2UiLAogICAgICAgICJzZiIsInRlIiwidGYiLCJ0aSIsInVlIiwidWYiLCJ2ZSIsInZmIiwid2UiLCJ3ZiIsIndnIiwid2kiLCJ4ZSIsInllIiwieWYiLAogICAgICAgICJ5ayIsInlsIiwiemUiLCJ6ZiIsInprIgogICAgXTsKICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrICkgewogICAgICAgIGxbcHJvcHNbaV1dID0gbm9vcGZuOwogICAgfQogICAgd2luZG93LkwgPSB3aW5kb3cuSiA9IGw7Cn0pKCk7Cg=="},{"name":"nobab.js","aliases":["bab-defuser.js","prevent-bab.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBzaWduYXR1cmVzID0gWwogICAgICAgIFsgJ2Jsb2NrYWRibG9jaycgXSwKICAgICAgICBbICdiYWJhc2JtJyBdLAogICAgICAgIFsgL2dldEl0ZW1cKCdiYWJuJ1wpLyBdLAogICAgICAgIFsKICAgICAgICAgICAgJ2dldEVsZW1lbnRCeUlkJywKICAgICAgICAgICAgJ1N0cmluZy5mcm9tQ2hhckNvZGUnLAogICAgICAgICAgICAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknLAogICAgICAgICAgICAnY2hhckF0JywKICAgICAgICAgICAgJ0RPTUNvbnRlbnRMb2FkZWQnLAogICAgICAgICAgICAnQWRCbG9jaycsCiAgICAgICAgICAgICdhZGRFdmVudExpc3RlbmVyJywKICAgICAgICAgICAgJ2RvU2Nyb2xsJywKICAgICAgICAgICAgJ2Zyb21DaGFyQ29kZScsCiAgICAgICAgICAgICc8PDJ8cj4+NCcsCiAgICAgICAgICAgICdzZXNzaW9uU3RvcmFnZScsCiAgICAgICAgICAgICdjbGllbnRXaWR0aCcsCiAgICAgICAgICAgICdsb2NhbFN0b3JhZ2UnLAogICAgICAgICAgICAnTWF0aCcsCiAgICAgICAgICAgICdyYW5kb20nCiAgICAgICAgXSwKICAgIF07CiAgICBjb25zdCBjaGVjayA9IGZ1bmN0aW9uKHMpIHsKICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBzaWduYXR1cmVzLmxlbmd0aDsgaSsrICkgewogICAgICAgICAgICBjb25zdCB0b2tlbnMgPSBzaWduYXR1cmVzW2ldOwogICAgICAgICAgICBsZXQgbWF0Y2ggPSAwOwogICAgICAgICAgICBmb3IgKCBsZXQgaiA9IDA7IGogPCB0b2tlbnMubGVuZ3RoOyBqKysgKSB7CiAgICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IHRva2Vuc1tqXTsKICAgICAgICAgICAgICAgIGNvbnN0IHBvcyA9IHRva2VuIGluc3RhbmNlb2YgUmVnRXhwCiAgICAgICAgICAgICAgICAgICAgPyBzLnNlYXJjaCh0b2tlbikKICAgICAgICAgICAgICAgICAgICA6IHMuaW5kZXhPZih0b2tlbik7CiAgICAgICAgICAgICAgICBpZiAoIHBvcyAhPT0gLTEgKSB7IG1hdGNoICs9IDE7IH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIChtYXRjaCAvIHRva2Vucy5sZW5ndGgpID49IDAuOCApIHsgcmV0dXJuIHRydWU7IH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKICAgIHdpbmRvdy5ldmFsID0gbmV3IFByb3h5KHdpbmRvdy5ldmFsLCB7ICAgICAgICAgICAgICAvLyBqc2hpbnQgaWdub3JlOiBsaW5lCiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKHRhcmdldCwgdGhpc0FyZywgYXJncykgewogICAgICAgICAgICBjb25zdCBhID0gYXJnc1swXTsKICAgICAgICAgICAgaWYgKCB0eXBlb2YgYSAhPT0gJ3N0cmluZycgfHwgIWNoZWNrKGEpICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIGRvY3VtZW50LmJvZHkgKSB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnJlbW92ZVByb3BlcnR5KCd2aXNpYmlsaXR5Jyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhYmFzYm1zZ3gnKTsKICAgICAgICAgICAgaWYgKCBlbCApIHsKICAgICAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7CiAgICB3aW5kb3cuc2V0VGltZW91dCA9IG5ldyBQcm94eSh3aW5kb3cuc2V0VGltZW91dCwgewogICAgICAgIGFwcGx5OiBmdW5jdGlvbih0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpIHsKICAgICAgICAgICAgY29uc3QgYSA9IGFyZ3NbMF07CiAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgIHR5cGVvZiBhICE9PSAnc3RyaW5nJyB8fAogICAgICAgICAgICAgICAgL1wuYmFiX2VsZW1lbnRpZC4kLy50ZXN0KGEpID09PSBmYWxzZQogICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKfSkoKTsK"},{"name":"nobab2.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAyMS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0OwogICAgaWYgKCBzY3JpcHQgPT09IG51bGwgKSB7IHJldHVybjsgfQogICAgY29uc3Qgc3JjID0gc2NyaXB0LnNyYzsKICAgIGlmICggdHlwZW9mIHNyYyAhPT0gJ3N0cmluZycgKSB7IHJldHVybjsgfQogICAgLy8gVGhlIHNjcmlwbGV0IGlzIG1lYW50IHRvIGFjdCBPTkxZIHdoZW4gaXQncyBiZWluZyB1c2VkIGFzIGEgcmVkaXJlY3Rpb24KICAgIC8vIGZvciBzcGVjaWZpYyBkb21haW5zLgogICAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKAogICAgICAgICdeaHR0cHM/Oi8vW1xcdy1dK1xcLignICsKICAgICAgICBbCiAgICAgICAgICAgICdhZGNsaXh4XFwubmV0JywKICAgICAgICAgICAgJ2FkbmV0YXNpYVxcLmNvbScsCiAgICAgICAgICAgICdhZHRyYWNrZXJzXFwubmV0JywKICAgICAgICAgICAgJ2Jhbm5lcnRyYWNrXFwubmV0JywKICAgICAgICBdLmpvaW4oJ3wnKSArCiAgICAgICAgJykvLicKICAgICk7CiAgICBpZiAoIHJlLnRlc3Qoc3JjKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgd2luZG93Lm5IN2VYek9zRyA9IDg1ODsKfSkoKTsK"},{"name":"noeval.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBsb2cgPSBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpOwogICAgd2luZG93LmV2YWwgPSBuZXcgUHJveHkod2luZG93LmV2YWwsIHsgICAgICAgICAgLy8ganNoaW50IGlnbm9yZTogbGluZQogICAgICAgIGFwcGx5OiBmdW5jdGlvbih0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpIHsKICAgICAgICAgICAgbG9nKGBEb2N1bWVudCB0cmllZCB0byBldmFsLi4uICR7YXJnc1swXX1cbmApOwogICAgICAgIH0KICAgIH0pOwp9KSgpOwo="},{"name":"noeval-silent.js","aliases":["silent-noeval.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB3aW5kb3cuZXZhbCA9IG5ldyBQcm94eSh3aW5kb3cuZXZhbCwgeyAgICAgICAgICAvLyBqc2hpbnQgaWdub3JlOiBsaW5lCiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKCkgewogICAgICAgIH0KICAgIH0pOwp9KSgpOwo="},{"name":"nofab.js","aliases":["fuckadblock.js-3.2.0"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBjb25zdCBGYWIgPSBmdW5jdGlvbigpIHt9OwogICAgRmFiLnByb3RvdHlwZS5jaGVjayA9IG5vb3BmbjsKICAgIEZhYi5wcm90b3R5cGUuY2xlYXJFdmVudCA9IG5vb3BmbjsKICAgIEZhYi5wcm90b3R5cGUuZW1pdEV2ZW50ID0gbm9vcGZuOwogICAgRmFiLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICBpZiAoICFhICkgeyBiKCk7IH0KICAgICAgICByZXR1cm4gdGhpczsKICAgIH07CiAgICBGYWIucHJvdG90eXBlLm9uRGV0ZWN0ZWQgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH07CiAgICBGYWIucHJvdG90eXBlLm9uTm90RGV0ZWN0ZWQgPSBmdW5jdGlvbihhKSB7CiAgICAgICAgYSgpOwogICAgICAgIHJldHVybiB0aGlzOwogICAgfTsKICAgIEZhYi5wcm90b3R5cGUuc2V0T3B0aW9uID0gbm9vcGZuOwogICAgRmFiLnByb3RvdHlwZS5vcHRpb25zID0gewogICAgICAgIHNldDogbm9vcGZuLAogICAgICAgIGdldDogbm9vcGZuLAogICAgfTsKICAgIGNvbnN0IGZhYiA9IG5ldyBGYWIoKTsKICAgIGNvbnN0IGdldFNldEZhYiA9IHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gRmFiOyB9LAogICAgICAgIHNldDogZnVuY3Rpb24oKSB7fQogICAgfTsKICAgIGNvbnN0IGdldHNldGZhYiA9IHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFiOyB9LAogICAgICAgIHNldDogZnVuY3Rpb24oKSB7fQogICAgfTsKICAgIGlmICggd2luZG93Lmhhc093blByb3BlcnR5KCdGdWNrQWRCbG9jaycpICkgeyB3aW5kb3cuRnVja0FkQmxvY2sgPSBGYWI7IH0KICAgIGVsc2UgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnRnVja0FkQmxvY2snLCBnZXRTZXRGYWIpOyB9CiAgICBpZiAoIHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnQmxvY2tBZEJsb2NrJykgKSB7IHdpbmRvdy5CbG9ja0FkQmxvY2sgPSBGYWI7IH0KICAgIGVsc2UgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnQmxvY2tBZEJsb2NrJywgZ2V0U2V0RmFiKTsgfQogICAgaWYgKCB3aW5kb3cuaGFzT3duUHJvcGVydHkoJ1NuaWZmQWRCbG9jaycpICkgeyB3aW5kb3cuU25pZmZBZEJsb2NrID0gRmFiOyB9CiAgICBlbHNlIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ1NuaWZmQWRCbG9jaycsIGdldFNldEZhYik7IH0KICAgIGlmICggd2luZG93Lmhhc093blByb3BlcnR5KCdmdWNrQWRCbG9jaycpICkgeyB3aW5kb3cuZnVja0FkQmxvY2sgPSBmYWI7IH0KICAgIGVsc2UgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnZnVja0FkQmxvY2snLCBnZXRzZXRmYWIpOyB9CiAgICBpZiAoIHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnYmxvY2tBZEJsb2NrJykgKSB7IHdpbmRvdy5ibG9ja0FkQmxvY2sgPSBmYWI7IH0KICAgIGVsc2UgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnYmxvY2tBZEJsb2NrJywgZ2V0c2V0ZmFiKTsgfQogICAgaWYgKCB3aW5kb3cuaGFzT3duUHJvcGVydHkoJ3NuaWZmQWRCbG9jaycpICkgeyB3aW5kb3cuc25pZmZBZEJsb2NrID0gZmFiOyB9CiAgICBlbHNlIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ3NuaWZmQWRCbG9jaycsIGdldHNldGZhYik7IH0KfSkoKTsK"},{"name":"noop-0.1s.mp3","aliases":["noopmp3-0.1s","abp-resource:blank-mp3"],"kind":{"mime":"audio/mp3"},"content":"SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU2LjQwLjEwMQAAAAAAAAAAAAAA//tUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAGAAADAABgYGBgYGBgYGBgYGBgYGBggICAgICAgICAgICAgICAgICgoKCgoKCgoKCgoKCgoKCgwMDAwMDAwMDAwMDAwMDAwMDg4ODg4ODg4ODg4ODg4ODg4P////////////////////8AAAAATGF2YzU2LjYwAAAAAAAAAAAAAAAAJAAAAAAAAAAAAwDNZKlY//sUZAAP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAETEFNRTMuOTkuNVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZB4P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZDwP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZFoP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZHgP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZJYP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"},{"name":"noop-0.5s.mp3","aliases":[],"kind":{"mime":"audio/mp3"},"content":"SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjI5LjEwMAAAAAAAAAAAAAAA//tUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAWAAAJAAAgICAgKioqKio1NTU1QEBAQEBKSkpKVVVVVVVgYGBgampqamp1dXV1gICAgICKioqKlZWVlZWgoKCgoKqqqqq1tbW1tcDAwMDKysrKytXV1dXg4ODg4Orq6ur19fX19f////8AAAAATGF2YzU4LjU0AAAAAAAAAAAAAAAAJAMAAAAAAAAACQDI0dkC//sUZAAP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAETEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZB4P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZDwP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZFoP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZHgP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZJYP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZLQP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZNIP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sUZOGP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"},{"name":"noop-1s.mp4","aliases":["noopmp4-1s","abp-resource:blank-mp4"],"kind":{"mime":"video/mp4"},"content":"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"},{"name":"noop.css","aliases":[],"kind":{"mime":"text/css"},"content":"LyogKi8K"},{"name":"noop.html","aliases":["noopframe"],"kind":{"mime":"text/html"},"content":"PCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+PHRpdGxlPjwvdGl0bGU+PC9oZWFkPgogICAgPGJvZHk+PC9ib2R5Pgo8L2h0bWw+Cg=="},{"name":"noop.js","aliases":["noopjs","abp-resource:blank-js"],"kind":{"mime":"application/javascript"},"content":"KGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwp9KSgpOwo="},{"name":"noop.json","aliases":["noopjson"],"kind":{"mime":"application/json"},"content":"e30="},{"name":"noop.txt","aliases":["nooptext"],"kind":{"mime":"text/plain"},"content":"Cg=="},{"name":"noop-vast2.xml","aliases":["noopvast-2.0"],"kind":{"mime":"text/xml"},"content":"PFZBU1QgdmVyc2lvbj0iMi4wIj48L1ZBU1Q+Cg=="},{"name":"noop-vast3.xml","aliases":["noopvast-3.0"],"kind":{"mime":"text/xml"},"content":"PFZBU1QgdmVyc2lvbj0iMy4wIj48L1ZBU1Q+Cg=="},{"name":"noop-vast4.xml","aliases":["noopvast-4.0"],"kind":{"mime":"text/xml"},"content":"PFZBU1QgdmVyc2lvbj0iNC4wIj48L1ZBU1Q+Cg=="},{"name":"noop-vmap1.xml","aliases":["noop-vmap1.0.xml","noopvmap-1.0"],"kind":{"mime":"text/xml"},"content":"PHZtYXA6Vk1BUCB4bWxuczp2bWFwPSJodHRwOi8vd3d3LmlhYi5uZXQvdmlkZW9zdWl0ZS92bWFwIiB2ZXJzaW9uPSIxLjAiPjwvdm1hcDpWTUFQPgo="},{"name":"outbrain-widget.js","aliases":["widgets.outbrain.com/outbrain.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBub29wZm4gPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBjb25zdCBvYnIgPSB7fTsKICAgIGNvbnN0IG1ldGhvZHMgPSBbCiAgICAgICAgJ2NhbGxDbGljaycsCiAgICAgICAgJ2NhbGxMb2FkTW9yZScsCiAgICAgICAgJ2NhbGxSZWNzJywKICAgICAgICAnY2FsbFVzZXJaYXBwaW5nJywKICAgICAgICAnY2FsbFdoYXRJcycsCiAgICAgICAgJ2NhbmNlbFJlY29tbWVuZGF0aW9uJywKICAgICAgICAnY2FuY2VsUmVjcycsCiAgICAgICAgJ2Nsb3NlQ2FyZCcsCiAgICAgICAgJ2Nsb3NlTW9kYWwnLAogICAgICAgICdjbG9zZVRieCcsCiAgICAgICAgJ2Vycm9ySW5qZWN0aW9uSGFuZGxlcicsCiAgICAgICAgJ2dldENvdW50T2ZSZWNzJywKICAgICAgICAnZ2V0U3RhdCcsCiAgICAgICAgJ2ltYWdlRXJyb3InLAogICAgICAgICdtYW51YWxWaWRlb0NsaWNrZWQnLAogICAgICAgICdvbk9kYlJldHVybicsCiAgICAgICAgJ29uVmlkZW9DbGljaycsCiAgICAgICAgJ3BhZ2VyTG9hZCcsCiAgICAgICAgJ3JlY0NsaWNrZWQnLAogICAgICAgICdyZWZyZXNoU3BlY2lmaWNXaWRnZXQnLAogICAgICAgICdyZW5kZXJTcGFXaWRnZXRzJywKICAgICAgICAncmVmcmVzaFdpZGdldCcsCiAgICAgICAgJ3JlbG9hZFdpZGdldCcsCiAgICAgICAgJ3Jlc2VhcmNoV2lkZ2V0JywKICAgICAgICAncmV0dXJuZWRFcnJvcicsCiAgICAgICAgJ3JldHVybmVkSHRtbERhdGEnLAogICAgICAgICdyZXR1cm5lZElyZERhdGEnLAogICAgICAgICdyZXR1cm5lZEpzb25EYXRhJywKICAgICAgICAnc2Nyb2xsTG9hZCcsCiAgICAgICAgJ3Nob3dEZXNjcmlwdGlvbicsCiAgICAgICAgJ3Nob3dSZWNJbklmcmFtZScsCiAgICAgICAgJ3VzZXJaYXBwaW5nTWVzc2FnZScsCiAgICAgICAgJ3phcHBpbmdGb3JtQWN0aW9uJwogICAgXTsKICAgIG9ici5leHRlcm4gPSB7CiAgICAgICAgdmlkZW86IHsKICAgICAgICAgICAgZ2V0VmlkZW9SZWNzOiBub29wZm4sCiAgICAgICAgICAgIHZpZGVvQ2xpY2tlZDogbm9vcGZuCiAgICAgICAgfQogICAgfTsKICAgIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihhKSB7CiAgICAgICAgb2JyLmV4dGVyblthXSA9IG5vb3BmbjsKICAgIH0pOwogICAgd2luZG93Lk9CUiA9IHdpbmRvdy5PQlIgfHwgb2JyOwp9KSgpOwo="},{"name":"popads.js","aliases":["popads.net.js","prevent-popads-net.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBtYWdpYyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoRGF0ZS5ub3coKSAlIDI2ICsgOTcpICsKICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogOTgyNDUxNjUzICsgOTgyNDUxNjUzKS50b1N0cmluZygzNik7CiAgICBjb25zdCBvZSA9IHdpbmRvdy5vbmVycm9yOwogICAgd2luZG93Lm9uZXJyb3IgPSBmdW5jdGlvbihtc2csIHNyYywgbGluZSwgY29sLCBlcnJvcikgewogICAgICAgIGlmICggdHlwZW9mIG1zZyA9PT0gJ3N0cmluZycgJiYgbXNnLmluZGV4T2YobWFnaWMpICE9PSAtMSApIHsgcmV0dXJuIHRydWU7IH0KICAgICAgICBpZiAoIG9lIGluc3RhbmNlb2YgRnVuY3Rpb24gKSB7CiAgICAgICAgICAgIHJldHVybiBvZShtc2csIHNyYywgbGluZSwgY29sLCBlcnJvcik7CiAgICAgICAgfQogICAgfS5iaW5kKCk7CiAgICBjb25zdCB0aHJvd01hZ2ljID0gZnVuY3Rpb24oKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihtYWdpYyk7IH07CiAgICBkZWxldGUgd2luZG93LlBvcEFkczsKICAgIGRlbGV0ZSB3aW5kb3cucG9wbnM7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh3aW5kb3csIHsKICAgICAgICBQb3BBZHM6IHsgc2V0OiB0aHJvd01hZ2ljIH0sCiAgICAgICAgcG9wbnM6IHsgc2V0OiB0aHJvd01hZ2ljIH0KICAgIH0pOwp9KSgpOwo="},{"name":"popads-dummy.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBkZWxldGUgd2luZG93LlBvcEFkczsKICAgIGRlbGV0ZSB3aW5kb3cucG9wbnM7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh3aW5kb3csIHsKICAgICAgICBQb3BBZHM6IHsgdmFsdWU6IHt9IH0sCiAgICAgICAgcG9wbnM6IHsgdmFsdWU6IHt9IH0KICAgIH0pOwp9KSgpOwo="},{"name":"prebid-ads.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAyMi1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB3aW5kb3cuY2FuUnVuQWRzID0gdHJ1ZTsKICAgIHdpbmRvdy5pc0FkQmxvY2tBY3RpdmUgPSBmYWxzZTsKfSkoKTsK"},{"name":"scorecardresearch_beacon.js","aliases":["scorecardresearch.com/beacon.js"],"kind":{"mime":"application/javascript"},"content":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCiAgICB1QmxvY2sgT3JpZ2luIC0gYSBicm93c2VyIGV4dGVuc2lvbiB0byBibG9jayByZXF1ZXN0cy4KICAgIENvcHlyaWdodCAoQykgMjAxOS1wcmVzZW50IFJheW1vbmQgSGlsbAoKICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5CiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQogICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IKICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgogICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQogICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSB7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL30uCgogICAgSG9tZTogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwvdUJsb2NrCiovCgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB3aW5kb3cuQ09NU0NPUkUgPSB7CiAgICAgICAgcHVyZ2U6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB3aW5kb3cuX2NvbXNjb3JlID0gW107CiAgICAgICAgfSwKICAgICAgICBiZWFjb246IGZ1bmN0aW9uKCkgewogICAgICAgIH0KICAgIH07Cn0pKCk7Cg=="},{"name":"async-sugarcoat-04394153a7ce417b88e3fe1790a4e6a269bfebe5.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"async-sugarcoat-8a459c41783885dc83d30f5b7da2359091f4e607.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"brave-disable-pageview-api.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8vIGJyYXZlLWRpc2FibGUtcGFnZXZpZXctYXBpLmpzCi8vIEJhc2VkIG9uOiBodHRwczovL2FkZG9ucy5tb3ppbGxhLm9yZy9maXJlZm94L2FkZG9uL2Rpc2FibGUtcGFnZS12aXNpYmlsaXR5LwovLyBMaWNlbnNlOiAgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9ic2QtbGljZW5zZS5waHAKLy8gRnJvbTogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZ3dhcnNlci8zYjQ3YjYxODYzYmZmY2ZlYmU0NDk4Yzc3YjIzMDFjZAooZnVuY3Rpb24oKXsKLy8gdmlzaWJpbGl0eWNoYW5nZSBldmVudHMgYXJlIGNhcHR1cmVkIGFuZCBzdG9wcGVkIApkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJ2aXNpYmlsaXR5Y2hhbmdlIiwgZnVuY3Rpb24oZSkgewogICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTsKfSwgdHJ1ZSk7Ci8vIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSBhbHdheXMgcmV0dXJucyBmYWxzZQpPYmplY3QuZGVmaW5lUHJvcGVydHkoRG9jdW1lbnQucHJvdG90eXBlLCAiaGlkZGVuIiwgewogICAgZ2V0OiBmdW5jdGlvbiBoaWRkZW4oKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSwKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUKfSk7Ci8vIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSBhbHdheXMgcmV0dXJucyAidmlzaWJsZSIKT2JqZWN0LmRlZmluZVByb3BlcnR5KERvY3VtZW50LnByb3RvdHlwZSwgInZpc2liaWxpdHlTdGF0ZSIsIHsKICAgIGdldDogZnVuY3Rpb24gdmlzaWJpbGl0eVN0YXRlKCkgewogICAgICAgIHJldHVybiAidmlzaWJsZSI7CiAgICB9LAogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQp9KTsKfSkoKQo="},{"name":"brave-fix.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8vIGJyYXZlLWZpeC5qcwovLy8gYWxpYXMgYmYuanMKZGVsZXRlIE5hdmlnYXRvci5wcm90b3R5cGUuYnJhdmUKZGVsZXRlIHdpbmRvdy5uYXZpZ2F0b3IuYnJhdmUK"},{"name":"brave-google-maps-fix.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vYnJhdmUvYnJhdmUtYnJvd3Nlci9pc3N1ZXMvMzcwNzUKKCgpID0+IHsKICBpZiAobG9jYXRpb24ucGF0aG5hbWUuc3RhcnRzV2l0aCgiL21hcHMvIikgfHwgbG9jYXRpb24ucGF0aG5hbWUgPT09ICIvbWFwcyIpIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXZWJHTFNoYWRlclByZWNpc2lvbkZvcm1hdC5wcm90b3R5cGUsICdwcmVjaXNpb24nLCB7CiAgICAgIHZhbHVlOiAwLAogICAgICB3cml0YWJsZTogZmFsc2UKICAgIH0pOwogIH0KfSkoKTsK"},{"name":"brave-video-bg-play.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8vIGJyYXZlLXZpZGVvLWJnLXBsYXkuanMKLy8gQmFzZWQgb246IGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3ZpZGVvLWJnLXBsYXkKLy8gTGljZW5zZTogIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3ZpZGVvLWJnLXBsYXkvYmxvYi9tYXN0ZXIvTElDRU5TRSAoTUlUKQovLyBGcm9tOiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9nd2Fyc2VyLzNiNDdiNjE4NjNiZmZjZmViZTQ0OThjNzdiMjMwMWNkCihmdW5jdGlvbigpewpjb25zdCBJU19ZT1VUVUJFID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLnNlYXJjaCgvKD86XnwuK1wuKXlvdXR1YmUuY29tLykgPiAtMSB8fAogICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLnNlYXJjaCgvKD86XnwuK1wuKXlvdXR1YmUtbm9jb29raWUuY29tLykgPiAtMTsKY29uc3QgSVNfTU9CSUxFX1lPVVRVQkUgPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT0gJ20ueW91dHViZS5jb20nOwpjb25zdCBJU19ERVNLVE9QX1lPVVRVQkUgPSBJU19ZT1VUVUJFICYmICFJU19NT0JJTEVfWU9VVFVCRTsKY29uc3QgSVNfVklNRU8gPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUuc2VhcmNoKC8oPzpefC4rXC4pdmltZW8uY29tLykgPiAtMTsKY29uc3QgSVNfQU5EUk9JRCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0FuZHJvaWQnKSA+IC0xOwovLyBQYWdlIFZpc2liaWxpdHkgQVBJCmlmIChJU19BTkRST0lEIHx8ICFJU19ERVNLVE9QX1lPVVRVQkUpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhkb2N1bWVudCwKICAgIHsgJ2hpZGRlbic6IHt2YWx1ZTogZmFsc2V9LCAndmlzaWJpbGl0eVN0YXRlJzoge3ZhbHVlOiAndmlzaWJsZSd9IH0pOwp9CndpbmRvdy5hZGRFdmVudExpc3RlbmVyKAogICd2aXNpYmlsaXR5Y2hhbmdlJywgZXZ0ID0+IGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSwgdHJ1ZSk7Ci8vIEZ1bGxzY3JlZW4gQVBJCmlmIChJU19WSU1FTykgewogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKAogICAgJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBldnQgPT4gZXZ0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCB0cnVlKTsKfQovLyBVc2VyIGFjdGl2aXR5IHRyYWNraW5nCmlmIChJU19ZT1VUVUJFKSB7CiAgY29uc3QgcmVmcmVzaEludGVydmFsID0gNSAqIDYwICogMTAwMDsgLy8gZXZlcnkgNSBtaW51dGVzCiAgd2FpdEZvcllvdXR1YmVMYWN0SW5pdCgoKSA9PiByZWZyZXNoTGFjdCgpLCByZWZyZXNoSW50ZXJ2YWwpOwp9CmZ1bmN0aW9uIHdhaXRGb3JZb3V0dWJlTGFjdEluaXQoYUNhbGxiYWNrLCBhQ2FsbGJhY2tJbnRlcnZhbCwgYURlbGF5ID0gMTAwMCkgewogIGxldCBwYWdlV2luID0gd2luZG93OwogIGlmIChwYWdlV2luLmhhc093blByb3BlcnR5KCdfbGFjdCcpKSB7CiAgICB3aW5kb3cuc2V0SW50ZXJ2YWwoYUNhbGxiYWNrLCBhQ2FsbGJhY2tJbnRlcnZhbCk7CiAgfSBlbHNlIHsKICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHdhaXRGb3JZb3V0dWJlTGFjdEluaXQoYUNhbGxiYWNrLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhQ2FsbGJhY2tJbnRlcnZhbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYURlbGF5ICogMiksCiAgICAgICAgICAgICAgICAgICAgICBhRGVsYXkpOwogIH0KfQpmdW5jdGlvbiByZWZyZXNoTGFjdCgpIHsKICB3aW5kb3cuX2xhY3QgPSBEYXRlLm5vdygpOwp9Cn0pKCkK"},{"name":"brave-youtube-navigation-fix.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"KF8gPT4gewogIGNvbnN0IG9yaWdQZXJmTm93ID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdzsKICBsZXQgcHJldmlvdXMgPSAwOwoKICB3aW5kb3cucGVyZm9ybWFuY2Uubm93ID0gZnVuY3Rpb24gKCkgewogICAgbGV0IGN1cnJlbnQgPSBvcmlnUGVyZk5vdy5hcHBseSh0aGlzKTsKICAgIGlmIChjdXJyZW50IDw9IHByZXZpb3VzKSB7CiAgICAgIGN1cnJlbnQgPSBwcmV2aW91cyArIE51bWJlci5FUFNJTE9OICogMTAwMDAwOwogICAgfQoKICAgIHJldHVybiBwcmV2aW91cyA9IGN1cnJlbnQ7CiAgfQp9KSgpOwo="},{"name":"brave-youtube-theater-fix.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"KGFzeW5jIF8gPT4gewogIGlmIChzZWxmLmNvb2tpZVN0b3JlID09PSB1bmRlZmluZWQpIHsKICAgIC8vIERvIG5vdGhpbmcgb24gaU9TLiBUaGUgcHJvYmxlbSBkb2Vzbid0IGV4aXN0IHRoZXJlLCBhbmQgdGhlCiAgICAvLyBzb2x1dGlvbiB3b3VsZG4ndCB3b3JrIGFueXdheQogICAgcmV0dXJuCiAgfQogIGNvbnN0IHN0b3JlS2V5ID0gJ2JyYXZlOjp3aWRlJwogIGNvbnN0IGNvb2tpZUtleSA9ICd3aWRlJwoKICBjb25zdCB3aWRlQ29va2llID0gYXdhaXQgY29va2llU3RvcmUuZ2V0KGNvb2tpZUtleSkKICBjb25zdCB3aWRlQ29va2llQmFja3VwID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oc3RvcmVLZXkpCgogIC8vIFNldCB0aGUgY29va2llIGZyb20gbG9jYWxTdG9yYWdlIGlmZjogCiAgLy8gMSkgaXQgZG9lc24ndCBhbHJlYWR5IGV4aXN0LgogIC8vIDIpIHdlIGhhdmUgYSBiYWNrdXAgaW4gbG9jYWxTdG9yYWdlLgogIGlmICghd2lkZUNvb2tpZSAmJiB3aWRlQ29va2llQmFja3VwKSB7CiAgICAvLyBUaGUgY29va2llIG9iamVjdCBpcyBzdG9yZWQgYXMgYSBzdHJpbmcuIFBhcnNlIGl0LgogICAgY29uc3QgY29va2llT2JqID0gSlNPTi5wYXJzZSh3aWRlQ29va2llQmFja3VwKQogICAgYXdhaXQgY29va2llU3RvcmUuc2V0KGNvb2tpZU9iaikKICAgIC8vIFJlZnJlc2ggdGhlIHBhZ2UgdG8gbWFrZSBZVCB1c2UgdGhlIG5ldyBjb29raWUuCiAgICBsb2NhdGlvbi5yZWxvYWQoKQogIH0KCiAgLy8gUGVyc2lzdCB0aGUgY29va2llIHZhbHVlIHRvIGxvY2FsU3RvcmFnZSBldmVyeSBzZWNvbmQuCiAgc2V0SW50ZXJ2YWwoYXN5bmMgXyA9PiB7CiAgICB0cnkgewogICAgICBjb25zdCB3aWRlQ29va2llID0gYXdhaXQgY29va2llU3RvcmUuZ2V0KGNvb2tpZUtleSkKICAgICAgLy8gV2UgaGF2ZSB0byBzdHJpbmdpZnkgdGhlIGNvb2tpZSBvYmplY3QgdG8gc3RvcmUgaXQgaW4gbG9jYWxTdG9yYWdlLgogICAgICBpZiAod2lkZUNvb2tpZSkgewogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHN0b3JlS2V5LCBKU09OLnN0cmluZ2lmeSh3aWRlQ29va2llKSkKICAgICAgfSBlbHNlIHsKICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShzdG9yZUtleSkKICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICAvLyBzd2FsbG93IGVycm9yIGZyb20gbm8gY29va2llIGV4aXN0aW5nCiAgICB9CiAgfSwgMTAwMCkKfSkoKTsK"},{"name":"de-amp.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"KGZ1bmN0aW9uICgpIHsKICBpZiAodHlwZW9mIGRlQW1wRW5hYmxlZCAhPT0gJ3VuZGVmaW5lZCcgJiYgZGVBbXBFbmFibGVkKSB7CiAgICBjb25zdCBhdHRyID0gJ2pzYWN0aW9uJwogICAgY29uc3Qgc2VsZWN0b3IgPSBgYVtkYXRhLWFtcC10aXRsZV1bJHthdHRyfV1gCiAgICBsZXQgdGltZXIKICAgIGNvbnN0IGlkbGVDYWxsYmFjayA9IChfID0+IHsKICAgICAgaWYgKHNlbGYucmVxdWVzdElkbGVDYWxsYmFjaykgewogICAgICAgIHJldHVybiAoY2FsbGJhY2ssIHRpbWVvdXQpID0+IHsKICAgICAgICAgIHJldHVybiBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2soY2FsbGJhY2ssIHsgdGltZW91dCB9KQogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gRmFsbGJhY2sgdG8gc2V0VGltZW91dCB3aGVuIHJlcXVlc3RJZGxlQ2FsbGJhY2sgZG9lc24ndCBleGlzdC4KICAgICAgcmV0dXJuIChjYWxsYmFjaykgPT4gewogICAgICAgIHJldHVybiBzZWxmLnNldFRpbWVvdXQoY2FsbGJhY2ssIDApCiAgICAgIH0KICAgIH0pKCkKICAgIGNvbnN0IHJtYXR0ciA9ICgpID0+IHsKICAgICAgdGltZXIgPSB1bmRlZmluZWQKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpCiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVzKSB7CiAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyKQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXgpIHsgfQogICAgfQogICAgY29uc3QgbXV0YXRpb25IYW5kbGVyID0gKG11dGF0aW9ucykgPT4gewogICAgICBpZiAodGltZXIgIT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybgogICAgICB9CiAgICAgIGxldCBza2lwID0gdHJ1ZQogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG11dGF0aW9ucy5sZW5ndGggJiYgc2tpcDsgaSsrKSB7CiAgICAgICAgY29uc3QgeyB0eXBlLCBhZGRlZE5vZGVzLCByZW1vdmVkTm9kZXMgfSA9IG11dGF0aW9uc1tpXQogICAgICAgIGlmICh0eXBlID09PSAnYXR0cmlidXRlcycpIHsKICAgICAgICAgIHNraXAgPSBmYWxzZQogICAgICAgIH0KICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFkZGVkTm9kZXMubGVuZ3RoICYmIHNraXA7IGorKykgewogICAgICAgICAgaWYgKGFkZGVkTm9kZXNbal0ubm9kZVR5cGUgPT09IDEpIHsKICAgICAgICAgICAgc2tpcCA9IGZhbHNlCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcmVtb3ZlZE5vZGVzLmxlbmd0aCAmJiBza2lwOyBqKyspIHsKICAgICAgICAgIGlmIChyZW1vdmVkTm9kZXNbal0ubm9kZVR5cGUgPT09IDEpIHsKICAgICAgICAgICAgc2tpcCA9IGZhbHNlCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChza2lwKSB7CiAgICAgICAgcmV0dXJuCiAgICAgIH0KCiAgICAgIHRpbWVyID0gaWRsZUNhbGxiYWNrKHJtYXR0ciwgMTcpCiAgICB9CgogICAgY29uc3Qgc3RhcnQgPSAoKSA9PiB7CiAgICAgIHJtYXR0cigpCiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobXV0YXRpb25IYW5kbGVyKQogICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCB7CiAgICAgICAgYXR0cmlidXRlczogdHJ1ZSwKICAgICAgICBhdHRyaWJ1dGVGaWx0ZXI6IFthdHRyXSwKICAgICAgICBjaGlsZExpc3Q6IHRydWUsCiAgICAgICAgc3VidHJlZTogdHJ1ZQogICAgICB9KQogICAgfQoKICAgIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHN0YXJ0LCB7IG9uY2U6IHRydWUgfSkKICB9Cn0pKCk7Cg=="},{"name":"touch-fix.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8gUmVtb3ZlIHRvdWNoIGNoZWNrcyBvbiBzZWxlY3RlZCBtb2JpbGUgc2l0ZXMKZGVsZXRlIERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVUb3VjaApkZWxldGUgRG9jdW1lbnQucHJvdG90eXBlLm9udG91Y2hzdGFydApkZWxldGUgRG9jdW1lbnQucHJvdG90eXBlLm9udG91Y2hlbmQKZGVsZXRlIERvY3VtZW50LnByb3RvdHlwZS5vbnRvdWNoY2FuY2VsCmRlbGV0ZSBEb2N1bWVudC5wcm90b3R5cGUuVG91Y2hFdmVudAo="},{"name":"trusted_types.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8vIHNldC10cnVzdGVkLXR5cGVzLmpzCmZ1bmN0aW9uIHNldFRydXN0ZWRUeXBlcygpIHsKICBpZiAod2luZG93LnRydXN0ZWRUeXBlcyAmJiB3aW5kb3cudHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSkgewogICAgd2luZG93LnRydXN0ZWRUeXBlcy5jcmVhdGVQb2xpY3koImRlZmF1bHQiLCB7CiAgICAgIGNyZWF0ZVNjcmlwdDogc3RyaW5nID0+IHN0cmluZwogICAgfSk7CiAgIH0KICAgcnVuQXQoKCkgPT4ge30sICdpbnRlcmFjdGl2ZScpOwp9Cg=="},{"name":"vaft-ublock-origin.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"video-swap-new-ublock-origin.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"set-attr.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-set-attr.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"remove-attr.js","aliases":["ra.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"set-cookie.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"set-cookie-reload.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-set-cookie.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-set-cookie-reload.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"remove-cookie.js","aliases":["cookie-remover.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"set-local-storage-item.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"set-session-storage-item.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-set-local-storage-item.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-set-session-storage-item.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"spoof-css.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"abort-current-script.js","aliases":["acs.js","abort-current-inline-script.js","acis.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"abort-on-property-read.js","aliases":["aopr.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"abort-on-property-write.js","aliases":["aopw.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"abort-on-stack-trace.js","aliases":["aost.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"addEventListener-defuser.js","aliases":["aeld.js","prevent-addEventListener.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"json-prune.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"json-prune-fetch-response.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"json-prune-xhr-response.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"evaldata-prune.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"adjust-setInterval.js","aliases":["nano-setInterval-booster.js","nano-sib.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"adjust-setTimeout.js","aliases":["nano-setTimeout-booster.js","nano-stb.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"noeval-if.js","aliases":["prevent-eval-if.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"prevent-fetch.js","aliases":["no-fetch-if.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"prevent-refresh.js","aliases":["refresh-defuser.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"remove-class.js","aliases":["rc.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"no-requestAnimationFrame-if.js","aliases":["norafif.js","prevent-requestAnimationFrame.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"set-constant.js","aliases":["set.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"no-setInterval-if.js","aliases":["nosiif.js","prevent-setInterval.js","setInterval-defuser.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"no-setTimeout-if.js","aliases":["nostif.js","prevent-setTimeout.js","setTimeout-defuser.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"webrtc-if.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgZnVuY3Rpb24gc2FmZVNlbGYoKSB7CiAgICBpZiAoIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGYgKSB7CiAgICAgICAgcmV0dXJuIHNjcmlwdGxldEdsb2JhbHMuc2FmZVNlbGY7CiAgICB9CiAgICBjb25zdCBzZWxmID0gZ2xvYmFsVGhpczsKICAgIGNvbnN0IHNhZmUgPSB7CiAgICAgICAgJ0FycmF5X2Zyb20nOiBBcnJheS5mcm9tLAogICAgICAgICdFcnJvcic6IHNlbGYuRXJyb3IsCiAgICAgICAgJ0Z1bmN0aW9uX3RvU3RyaW5nRm4nOiBzZWxmLkZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZywKICAgICAgICAnRnVuY3Rpb25fdG9TdHJpbmcnOiB0aGlzQXJnID0+IHNhZmUuRnVuY3Rpb25fdG9TdHJpbmdGbi5jYWxsKHRoaXNBcmcpLAogICAgICAgICdNYXRoX2Zsb29yJzogTWF0aC5mbG9vciwKICAgICAgICAnTWF0aF9tYXgnOiBNYXRoLm1heCwKICAgICAgICAnTWF0aF9taW4nOiBNYXRoLm1pbiwKICAgICAgICAnTWF0aF9yYW5kb20nOiBNYXRoLnJhbmRvbSwKICAgICAgICAnT2JqZWN0JzogT2JqZWN0LAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydHknOiBPYmplY3QuZGVmaW5lUHJvcGVydHkuYmluZChPYmplY3QpLAogICAgICAgICdPYmplY3RfZGVmaW5lUHJvcGVydGllcyc6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2Zyb21FbnRyaWVzJzogT2JqZWN0LmZyb21FbnRyaWVzLmJpbmQoT2JqZWN0KSwKICAgICAgICAnT2JqZWN0X2dldE93blByb3BlcnR5RGVzY3JpcHRvcic6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuYmluZChPYmplY3QpLAogICAgICAgICdSZWdFeHAnOiBzZWxmLlJlZ0V4cCwKICAgICAgICAnUmVnRXhwX3Rlc3QnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUudGVzdCwKICAgICAgICAnUmVnRXhwX2V4ZWMnOiBzZWxmLlJlZ0V4cC5wcm90b3R5cGUuZXhlYywKICAgICAgICAnUmVxdWVzdF9jbG9uZSc6IHNlbGYuUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUsCiAgICAgICAgJ1N0cmluZ19mcm9tQ2hhckNvZGUnOiBTdHJpbmcuZnJvbUNoYXJDb2RlLAogICAgICAgICdYTUxIdHRwUmVxdWVzdCc6IHNlbGYuWE1MSHR0cFJlcXVlc3QsCiAgICAgICAgJ2FkZEV2ZW50TGlzdGVuZXInOiBzZWxmLkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyLAogICAgICAgICdyZW1vdmVFdmVudExpc3RlbmVyJzogc2VsZi5FdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciwKICAgICAgICAnZmV0Y2gnOiBzZWxmLmZldGNoLAogICAgICAgICdKU09OJzogc2VsZi5KU09OLAogICAgICAgICdKU09OX3BhcnNlRm4nOiBzZWxmLkpTT04ucGFyc2UsCiAgICAgICAgJ0pTT05fc3RyaW5naWZ5Rm4nOiBzZWxmLkpTT04uc3RyaW5naWZ5LAogICAgICAgICdKU09OX3BhcnNlJzogKC4uLmFyZ3MpID0+IHNhZmUuSlNPTl9wYXJzZUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnSlNPTl9zdHJpbmdpZnknOiAoLi4uYXJncykgPT4gc2FmZS5KU09OX3N0cmluZ2lmeUZuLmNhbGwoc2FmZS5KU09OLCAuLi5hcmdzKSwKICAgICAgICAnbG9nJzogY29uc29sZS5sb2cuYmluZChjb25zb2xlKSwKICAgICAgICAvLyBQcm9wZXJ0aWVzCiAgICAgICAgbG9nTGV2ZWw6IDAsCiAgICAgICAgLy8gTWV0aG9kcwogICAgICAgIG1ha2VMb2dQcmVmaXgoLi4uYXJncykgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIgJiYgYFske2FyZ3Muam9pbignIFx1MjA1RCAnKX1dYCB8fCAnJzsKICAgICAgICB9LAogICAgICAgIHVib0xvZyguLi5hcmdzKSB7CiAgICAgICAgICAgIGlmICggdGhpcy5zZW5kVG9Mb2dnZXIgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIGlmICggYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3NbMF0gPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRvTG9nZ2VyKCdpbmZvJywgLi4uYXJncyk7CiAgICAgICAgICAgIAogICAgICAgIH0sCiAgICAgICAgdWJvRXJyKC4uLmFyZ3MpIHsKICAgICAgICAgICAgaWYgKCB0aGlzLnNlbmRUb0xvZ2dlciA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm47IH0KICAgICAgICAgICAgaWYgKCBhcmdzID09PSB1bmRlZmluZWQgfHwgYXJnc1swXSA9PT0gJycgKSB7IHJldHVybjsgfQogICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kVG9Mb2dnZXIoJ2Vycm9yJywgLi4uYXJncyk7CiAgICAgICAgfSwKICAgICAgICBlc2NhcGVSZWdleENoYXJzKHMpIHsKICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xdXFxdL2csICdcXCQmJyk7CiAgICAgICAgfSwKICAgICAgICBpbml0UGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHsKICAgICAgICAgICAgaWYgKCBwYXR0ZXJuID09PSAnJyApIHsKICAgICAgICAgICAgICAgIHJldHVybiB7IG1hdGNoQWxsOiB0cnVlLCBleHBlY3Q6IHRydWUgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBleHBlY3QgPSAob3B0aW9ucy5jYW5OZWdhdGUgIT09IHRydWUgfHwgcGF0dGVybi5zdGFydHNXaXRoKCchJykgPT09IGZhbHNlKTsKICAgICAgICAgICAgaWYgKCBleHBlY3QgPT09IGZhbHNlICkgewogICAgICAgICAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4uc2xpY2UoMSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggIT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHJlOiBuZXcgdGhpcy5SZWdFeHAoCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFsyXSB8fCBvcHRpb25zLmZsYWdzCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBleHBlY3QsCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggb3B0aW9ucy5mbGFncyAhPT0gdW5kZWZpbmVkICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICByZTogbmV3IHRoaXMuUmVnRXhwKHRoaXMuZXNjYXBlUmVnZXhDaGFycyhwYXR0ZXJuKSwKICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5mbGFncwogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0LAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4geyBwYXR0ZXJuLCBleHBlY3QgfTsKICAgICAgICB9LAogICAgICAgIHRlc3RQYXR0ZXJuKGRldGFpbHMsIGhheXN0YWNrKSB7CiAgICAgICAgICAgIGlmICggZGV0YWlscy5tYXRjaEFsbCApIHsgcmV0dXJuIHRydWU7IH0KICAgICAgICAgICAgaWYgKCBkZXRhaWxzLnJlICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuUmVnRXhwX3Rlc3QuY2FsbChkZXRhaWxzLnJlLCBoYXlzdGFjaykgPT09IGRldGFpbHMuZXhwZWN0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBoYXlzdGFjay5pbmNsdWRlcyhkZXRhaWxzLnBhdHRlcm4pID09PSBkZXRhaWxzLmV4cGVjdDsKICAgICAgICB9LAogICAgICAgIHBhdHRlcm5Ub1JlZ2V4KHBhdHRlcm4sIGZsYWdzID0gdW5kZWZpbmVkLCB2ZXJiYXRpbSA9IGZhbHNlKSB7CiAgICAgICAgICAgIGlmICggcGF0dGVybiA9PT0gJycgKSB7IHJldHVybiAvXi87IH0KICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSAvXlwvKC4rKVwvKFtnaW1zdV0qKSQvLmV4ZWMocGF0dGVybik7CiAgICAgICAgICAgIGlmICggbWF0Y2ggPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZVN0ciA9IHRoaXMuZXNjYXBlUmVnZXhDaGFycyhwYXR0ZXJuKTsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHZlcmJhdGltID8gYF4ke3JlU3RyfSRgIDogcmVTdHIsIGZsYWdzKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAobWF0Y2hbMV0sIG1hdGNoWzJdIHx8IHVuZGVmaW5lZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gL14vOwogICAgICAgIH0sCiAgICAgICAgZ2V0RXh0cmFBcmdzKGFyZ3MsIG9mZnNldCA9IDApIHsKICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IGFyZ3Muc2xpY2Uob2Zmc2V0KS5yZWR1Y2UoKG91dCwgdiwgaSwgYSkgPT4gewogICAgICAgICAgICAgICAgaWYgKCAoaSAmIDEpID09PSAwICkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhd1ZhbHVlID0gYVtpKzFdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gL15cZCskLy50ZXN0KHJhd1ZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlSW50KHJhd1ZhbHVlLCAxMCkKICAgICAgICAgICAgICAgICAgICAgICAgOiByYXdWYWx1ZTsKICAgICAgICAgICAgICAgICAgICBvdXQucHVzaChbIGFbaV0sIHZhbHVlIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICAgICAgfSwgW10pOwogICAgICAgICAgICByZXR1cm4gdGhpcy5PYmplY3RfZnJvbUVudHJpZXMoZW50cmllcyk7CiAgICAgICAgfSwKICAgICAgICBvbklkbGUoZm4sIG9wdGlvbnMpIHsKICAgICAgICAgICAgaWYgKCBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2sgKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrKGZuLCBvcHRpb25zKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc2VsZi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZm4pOwogICAgICAgIH0sCiAgICAgICAgb2ZmSWRsZShpZCkgewogICAgICAgICAgICBpZiAoIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjayApIHsKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmNhbmNlbElkbGVDYWxsYmFjayhpZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpOwogICAgICAgIH0KICAgIH07CiAgICBzY3JpcHRsZXRHbG9iYWxzLnNhZmVTZWxmID0gc2FmZTsKICAgIGlmICggc2NyaXB0bGV0R2xvYmFscy5iY1NlY3JldCA9PT0gdW5kZWZpbmVkICkgeyByZXR1cm4gc2FmZTsgfQogICAgLy8gVGhpcyBpcyBleGVjdXRlZCBvbmx5IHdoZW4gdGhlIGxvZ2dlciBpcyBvcGVuZWQKICAgIHNhZmUubG9nTGV2ZWwgPSBzY3JpcHRsZXRHbG9iYWxzLmxvZ0xldmVsIHx8IDE7CiAgICBsZXQgbGFzdExvZ1R5cGUgPSAnJzsKICAgIGxldCBsYXN0TG9nVGV4dCA9ICcnOwogICAgbGV0IGxhc3RMb2dUaW1lID0gMDsKICAgIHNhZmUudG9Mb2dUZXh0ID0gKHR5cGUsIC4uLmFyZ3MpID0+IHsKICAgICAgICBpZiAoIGFyZ3MubGVuZ3RoID09PSAwICkgeyByZXR1cm47IH0KICAgICAgICBjb25zdCB0ZXh0ID0gYFske2RvY3VtZW50LmxvY2F0aW9uLmhvc3RuYW1lIHx8IGRvY3VtZW50LmxvY2F0aW9uLmhyZWZ9XSR7YXJncy5qb2luKCcgJyl9YDsKICAgICAgICBpZiAoIHRleHQgPT09IGxhc3RMb2dUZXh0ICYmIHR5cGUgPT09IGxhc3RMb2dUeXBlICkgewogICAgICAgICAgICBpZiAoIChEYXRlLm5vdygpIC0gbGFzdExvZ1RpbWUpIDwgNTAwMCApIHsgcmV0dXJuOyB9CiAgICAgICAgfQogICAgICAgIGxhc3RMb2dUeXBlID0gdHlwZTsKICAgICAgICBsYXN0TG9nVGV4dCA9IHRleHQ7CiAgICAgICAgbGFzdExvZ1RpbWUgPSBEYXRlLm5vdygpOwogICAgICAgIHJldHVybiB0ZXh0OwogICAgfTsKICAgIHRyeSB7CiAgICAgICAgY29uc3QgYmMgPSBuZXcgc2VsZi5Ccm9hZGNhc3RDaGFubmVsKHNjcmlwdGxldEdsb2JhbHMuYmNTZWNyZXQpOwogICAgICAgIGxldCBiY0J1ZmZlciA9IFtdOwogICAgICAgIHNhZmUuc2VuZFRvTG9nZ2VyID0gKHR5cGUsIC4uLmFyZ3MpID0+IHsKICAgICAgICAgICAgY29uc3QgdGV4dCA9IHNhZmUudG9Mb2dUZXh0KHR5cGUsIC4uLmFyZ3MpOwogICAgICAgICAgICBpZiAoIHRleHQgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIGlmICggYmNCdWZmZXIgPT09IHVuZGVmaW5lZCApIHsKICAgICAgICAgICAgICAgIHJldHVybiBiYy5wb3N0TWVzc2FnZSh7IHdoYXQ6ICdtZXNzYWdlVG9Mb2dnZXInLCB0eXBlLCB0ZXh0IH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJjQnVmZmVyLnB1c2goeyB0eXBlLCB0ZXh0IH0pOwogICAgICAgIH07CiAgICAgICAgYmMub25tZXNzYWdlID0gZXYgPT4gewogICAgICAgICAgICBjb25zdCBtc2cgPSBldi5kYXRhOwogICAgICAgICAgICBzd2l0Y2ggKCBtc2cgKSB7CiAgICAgICAgICAgIGNhc2UgJ2lhbXJlYWR5ISc6CiAgICAgICAgICAgICAgICBpZiAoIGJjQnVmZmVyID09PSB1bmRlZmluZWQgKSB7IGJyZWFrOyB9CiAgICAgICAgICAgICAgICBiY0J1ZmZlci5mb3JFYWNoKCh7IHR5cGUsIHRleHQgfSkgPT4KICAgICAgICAgICAgICAgICAgICBiYy5wb3N0TWVzc2FnZSh7IHdoYXQ6ICdtZXNzYWdlVG9Mb2dnZXInLCB0eXBlLCB0ZXh0IH0pCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgYmNCdWZmZXIgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAnc2V0U2NyaXB0bGV0TG9nTGV2ZWxUb09uZSc6CiAgICAgICAgICAgICAgICBzYWZlLmxvZ0xldmVsID0gMTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICdzZXRTY3JpcHRsZXRMb2dMZXZlbFRvVHdvJzoKICAgICAgICAgICAgICAgIHNhZmUubG9nTGV2ZWwgPSAyOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGJjLnBvc3RNZXNzYWdlKCdhcmV5b3VyZWFkeT8nKTsKICAgIH0gY2F0Y2goXykgewogICAgICAgIHNhZmUuc2VuZFRvTG9nZ2VyID0gKHR5cGUsIC4uLmFyZ3MpID0+IHsKICAgICAgICAgICAgY29uc3QgdGV4dCA9IHNhZmUudG9Mb2dUZXh0KHR5cGUsIC4uLmFyZ3MpOwogICAgICAgICAgICBpZiAoIHRleHQgPT09IHVuZGVmaW5lZCApIHsgcmV0dXJuOyB9CiAgICAgICAgICAgIHNhZmUubG9nKGB1Qk8gJHt0ZXh0fWApOwogICAgICAgIH07CiAgICB9CiAgICByZXR1cm4gc2FmZTsKfQoKICAoZnVuY3Rpb24gd2VicnRjSWYoCiAgICBnb29kID0gJycKKSB7CiAgICBpZiAoIHR5cGVvZiBnb29kICE9PSAnc3RyaW5nJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCBzYWZlID0gc2FmZVNlbGYoKTsKICAgIGNvbnN0IHJlR29vZCA9IHNhZmUucGF0dGVyblRvUmVnZXgoZ29vZCk7CiAgICBjb25zdCBydGNOYW1lID0gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uCiAgICAgICAgPyAnUlRDUGVlckNvbm5lY3Rpb24nCiAgICAgICAgOiAod2luZG93LndlYmtpdFJUQ1BlZXJDb25uZWN0aW9uID8gJ3dlYmtpdFJUQ1BlZXJDb25uZWN0aW9uJyA6ICcnKTsKICAgIGlmICggcnRjTmFtZSA9PT0gJycgKSB7IHJldHVybjsgfQogICAgY29uc3QgbG9nID0gY29uc29sZS5sb2cuYmluZChjb25zb2xlKTsKICAgIGNvbnN0IG5ldXRlcmVkUGVlckNvbm5lY3Rpb25zID0gbmV3IFdlYWtTZXQoKTsKICAgIGNvbnN0IGlzR29vZENvbmZpZyA9IGZ1bmN0aW9uKGluc3RhbmNlLCBjb25maWcpIHsKICAgICAgICBpZiAoIG5ldXRlcmVkUGVlckNvbm5lY3Rpb25zLmhhcyhpbnN0YW5jZSkgKSB7IHJldHVybiBmYWxzZTsgfQogICAgICAgIGlmICggY29uZmlnIGluc3RhbmNlb2YgT2JqZWN0ID09PSBmYWxzZSApIHsgcmV0dXJuIHRydWU7IH0KICAgICAgICBpZiAoIEFycmF5LmlzQXJyYXkoY29uZmlnLmljZVNlcnZlcnMpID09PSBmYWxzZSApIHsgcmV0dXJuIHRydWU7IH0KICAgICAgICBmb3IgKCBjb25zdCBzZXJ2ZXIgb2YgY29uZmlnLmljZVNlcnZlcnMgKSB7CiAgICAgICAgICAgIGNvbnN0IHVybHMgPSB0eXBlb2Ygc2VydmVyLnVybHMgPT09ICdzdHJpbmcnCiAgICAgICAgICAgICAgICA/IFsgc2VydmVyLnVybHMgXQogICAgICAgICAgICAgICAgOiBzZXJ2ZXIudXJsczsKICAgICAgICAgICAgaWYgKCBBcnJheS5pc0FycmF5KHVybHMpICkgewogICAgICAgICAgICAgICAgZm9yICggY29uc3QgdXJsIG9mIHVybHMgKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCByZUdvb2QudGVzdCh1cmwpICkgeyByZXR1cm4gdHJ1ZTsgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICggdHlwZW9mIHNlcnZlci51c2VybmFtZSA9PT0gJ3N0cmluZycgKSB7CiAgICAgICAgICAgICAgICBpZiAoIHJlR29vZC50ZXN0KHNlcnZlci51c2VybmFtZSkgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCB0eXBlb2Ygc2VydmVyLmNyZWRlbnRpYWwgPT09ICdzdHJpbmcnICkgewogICAgICAgICAgICAgICAgaWYgKCByZUdvb2QudGVzdChzZXJ2ZXIuY3JlZGVudGlhbCkgKSB7IHJldHVybiB0cnVlOyB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbmV1dGVyZWRQZWVyQ29ubmVjdGlvbnMuYWRkKGluc3RhbmNlKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9OwogICAgY29uc3QgcGVlckNvbm5lY3Rpb25DdG9yID0gd2luZG93W3J0Y05hbWVdOwogICAgY29uc3QgcGVlckNvbm5lY3Rpb25Qcm90byA9IHBlZXJDb25uZWN0aW9uQ3Rvci5wcm90b3R5cGU7CiAgICBwZWVyQ29ubmVjdGlvblByb3RvLmNyZWF0ZURhdGFDaGFubmVsID0KICAgICAgICBuZXcgUHJveHkocGVlckNvbm5lY3Rpb25Qcm90by5jcmVhdGVEYXRhQ2hhbm5lbCwgewogICAgICAgICAgICBhcHBseTogZnVuY3Rpb24odGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSB7CiAgICAgICAgICAgICAgICBpZiAoIGlzR29vZENvbmZpZyh0YXJnZXQsIGFyZ3NbMV0pID09PSBmYWxzZSApIHsKICAgICAgICAgICAgICAgICAgICBsb2coJ3VCTzonLCBhcmdzWzFdKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ3Muc2xpY2UoMCwgMSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKTsKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgIHdpbmRvd1tydGNOYW1lXSA9CiAgICAgICAgbmV3IFByb3h5KHBlZXJDb25uZWN0aW9uQ3RvciwgewogICAgICAgICAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKHRhcmdldCwgYXJncykgewogICAgICAgICAgICAgICAgaWYgKCBpc0dvb2RDb25maWcodGFyZ2V0LCBhcmdzWzBdKSA9PT0gZmFsc2UgKSB7CiAgICAgICAgICAgICAgICAgICAgbG9nKCd1Qk86JywgYXJnc1swXSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmdzKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"prevent-xhr.js","aliases":["no-xhr-if.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"prevent-window-open.js","aliases":["nowoif.js","no-window-open-if.js","window.open-defuser.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"close-window.js","aliases":["window-close-if.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"window.name-defuser.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIHdpbmRvd05hbWVEZWZ1c2VyKCkgewogICAgaWYgKCB3aW5kb3cgPT09IHdpbmRvdy50b3AgKSB7CiAgICAgICAgd2luZG93Lm5hbWUgPSAnJzsKICAgIH0KfSkoLi4uYXJncy5zbGljZSgwLCBsYXN0X2FyZ19pbmRleCkpCn0="},{"name":"overlay-buster.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIG92ZXJsYXlCdXN0ZXIoKSB7CiAgICBpZiAoIHdpbmRvdyAhPT0gd2luZG93LnRvcCApIHsgcmV0dXJuOyB9CiAgICB2YXIgdHN0YXJ0OwogICAgdmFyIHR0bCA9IDMwMDAwOwogICAgdmFyIGRlbGF5ID0gMDsKICAgIHZhciBkZWxheVN0ZXAgPSA1MDsKICAgIHZhciBidXN0ZXIgPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgZG9jRWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsCiAgICAgICAgICAgIGJvZHlFbCA9IGRvY3VtZW50LmJvZHksCiAgICAgICAgICAgIHZ3ID0gTWF0aC5taW4oZG9jRWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoKSwKICAgICAgICAgICAgdmggPSBNYXRoLm1pbihkb2NFbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCksCiAgICAgICAgICAgIHRvbCA9IE1hdGgubWluKHZ3LCB2aCkgKiAwLjA1LAogICAgICAgICAgICBlbCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodncvMiwgdmgvMiksCiAgICAgICAgICAgIHN0eWxlLCByZWN0OwogICAgICAgIGZvciAoOzspIHsKICAgICAgICAgICAgaWYgKCBlbCA9PT0gbnVsbCB8fCBlbC5wYXJlbnROb2RlID09PSBudWxsIHx8IGVsID09PSBib2R5RWwgKSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTsKICAgICAgICAgICAgaWYgKCBwYXJzZUludChzdHlsZS56SW5kZXgsIDEwKSA+PSAxMDAwIHx8IHN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnICkgewogICAgICAgICAgICAgICAgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgICAgICAgICAgaWYgKCByZWN0LmxlZnQgPD0gdG9sICYmIHJlY3QudG9wIDw9IHRvbCAmJiAodncgLSByZWN0LnJpZ2h0KSA8PSB0b2wgJiYgKHZoIC0gcmVjdC5ib3R0b20pIDwgdG9sICkgewogICAgICAgICAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpOwogICAgICAgICAgICAgICAgICAgIHRzdGFydCA9IERhdGUubm93KCk7CiAgICAgICAgICAgICAgICAgICAgZWwgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHZ3LzIsIHZoLzIpOwogICAgICAgICAgICAgICAgICAgIGJvZHlFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnb3ZlcmZsb3cnLCAnYXV0bycsICdpbXBvcnRhbnQnKTsKICAgICAgICAgICAgICAgICAgICBkb2NFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnb3ZlcmZsb3cnLCAnYXV0bycsICdpbXBvcnRhbnQnKTsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7CiAgICAgICAgfQogICAgICAgIGlmICggKERhdGUubm93KCkgLSB0c3RhcnQpIDwgdHRsICkgewogICAgICAgICAgICBkZWxheSA9IE1hdGgubWluKGRlbGF5ICsgZGVsYXlTdGVwLCAxMDAwKTsKICAgICAgICAgICAgc2V0VGltZW91dChidXN0ZXIsIGRlbGF5KTsKICAgICAgICB9CiAgICB9OwogICAgdmFyIGRvbVJlYWR5ID0gZnVuY3Rpb24oZXYpIHsKICAgICAgICBpZiAoIGV2ICkgewogICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2LnR5cGUsIGRvbVJlYWR5KTsKICAgICAgICB9CiAgICAgICAgdHN0YXJ0ID0gRGF0ZS5ub3coKTsKICAgICAgICBzZXRUaW1lb3V0KGJ1c3RlciwgZGVsYXkpOwogICAgfTsKICAgIGlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnICkgewogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBkb21SZWFkeSk7CiAgICB9IGVsc2UgewogICAgICAgIGRvbVJlYWR5KCk7CiAgICB9Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"alert-buster.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIGFsZXJ0QnVzdGVyKCkgewogICAgd2luZG93LmFsZXJ0ID0gbmV3IFByb3h5KHdpbmRvdy5hbGVydCwgewogICAgICAgIGFwcGx5OiBmdW5jdGlvbihhKSB7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhhKTsKICAgICAgICB9LAogICAgICAgIGdldCh0YXJnZXQsIHByb3ApIHsKICAgICAgICAgICAgaWYgKCBwcm9wID09PSAndG9TdHJpbmcnICkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC50b1N0cmluZy5iaW5kKHRhcmdldCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCk7CiAgICAgICAgfSwKICAgIH0pOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"nowebrtc.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIG5vV2VicnRjKCkgewogICAgdmFyIHJ0Y05hbWUgPSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gPyAnUlRDUGVlckNvbm5lY3Rpb24nIDogKAogICAgICAgIHdpbmRvdy53ZWJraXRSVENQZWVyQ29ubmVjdGlvbiA/ICd3ZWJraXRSVENQZWVyQ29ubmVjdGlvbicgOiAnJwogICAgKTsKICAgIGlmICggcnRjTmFtZSA9PT0gJycgKSB7IHJldHVybjsgfQogICAgdmFyIGxvZyA9IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7CiAgICB2YXIgcGMgPSBmdW5jdGlvbihjZmcpIHsKICAgICAgICBsb2coJ0RvY3VtZW50IHRyaWVkIHRvIGNyZWF0ZSBhbiBSVENQZWVyQ29ubmVjdGlvbjogJW8nLCBjZmcpOwogICAgfTsKICAgIGNvbnN0IG5vb3AgPSBmdW5jdGlvbigpIHsKICAgIH07CiAgICBwYy5wcm90b3R5cGUgPSB7CiAgICAgICAgY2xvc2U6IG5vb3AsCiAgICAgICAgY3JlYXRlRGF0YUNoYW5uZWw6IG5vb3AsCiAgICAgICAgY3JlYXRlT2ZmZXI6IG5vb3AsCiAgICAgICAgc2V0UmVtb3RlRGVzY3JpcHRpb246IG5vb3AsCiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gJ1tvYmplY3QgUlRDUGVlckNvbm5lY3Rpb25dJzsKICAgICAgICB9CiAgICB9OwogICAgdmFyIHogPSB3aW5kb3dbcnRjTmFtZV07CiAgICB3aW5kb3dbcnRjTmFtZV0gPSBwYy5iaW5kKHdpbmRvdyk7CiAgICBpZiAoIHoucHJvdG90eXBlICkgewogICAgICAgIHoucHJvdG90eXBlLmNyZWF0ZURhdGFDaGFubmVsID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7fSwKICAgICAgICAgICAgICAgIHNlbmQ6IGZ1bmN0aW9uKCkge30KICAgICAgICAgICAgfTsKICAgICAgICB9LmJpbmQobnVsbCk7CiAgICB9Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"disable-newtab-links.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIGRpc2FibGVOZXd0YWJMaW5rcygpIHsKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXYpIHsKICAgICAgICB2YXIgdGFyZ2V0ID0gZXYudGFyZ2V0OwogICAgICAgIHdoaWxlICggdGFyZ2V0ICE9PSBudWxsICkgewogICAgICAgICAgICBpZiAoIHRhcmdldC5sb2NhbE5hbWUgPT09ICdhJyAmJiB0YXJnZXQuaGFzQXR0cmlidXRlKCd0YXJnZXQnKSApIHsKICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlOwogICAgICAgIH0KICAgIH0pOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"xml-prune.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"m3u-prune.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"href-sanitizer.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"call-nothrow.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIGNhbGxOb3Rocm93KAogICAgY2hhaW4gPSAnJwopIHsKICAgIGlmICggdHlwZW9mIGNoYWluICE9PSAnc3RyaW5nJyApIHsgcmV0dXJuOyB9CiAgICBpZiAoIGNoYWluID09PSAnJyApIHsgcmV0dXJuOyB9CiAgICBjb25zdCBwYXJ0cyA9IGNoYWluLnNwbGl0KCcuJyk7CiAgICBsZXQgb3duZXIgPSB3aW5kb3csIHByb3A7CiAgICBmb3IgKDs7KSB7CiAgICAgICAgcHJvcCA9IHBhcnRzLnNoaWZ0KCk7CiAgICAgICAgaWYgKCBwYXJ0cy5sZW5ndGggPT09IDAgKSB7IGJyZWFrOyB9CiAgICAgICAgb3duZXIgPSBvd25lcltwcm9wXTsKICAgICAgICBpZiAoIG93bmVyIGluc3RhbmNlb2YgT2JqZWN0ID09PSBmYWxzZSApIHsgcmV0dXJuOyB9CiAgICB9CiAgICBpZiAoIHByb3AgPT09ICcnICkgeyByZXR1cm47IH0KICAgIGNvbnN0IGZuID0gb3duZXJbcHJvcF07CiAgICBpZiAoIHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJyApIHsgcmV0dXJuOyB9CiAgICBvd25lcltwcm9wXSA9IG5ldyBQcm94eShmbiwgewogICAgICAgIGFwcGx5OiBmdW5jdGlvbiguLi5hcmdzKSB7CiAgICAgICAgICAgIGxldCByOwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgciA9IFJlZmxlY3QuYXBwbHkoLi4uYXJncyk7CiAgICAgICAgICAgIH0gY2F0Y2goZXgpIHsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcjsKICAgICAgICB9LAogICAgfSk7Cn0pKC4uLmFyZ3Muc2xpY2UoMCwgbGFzdF9hcmdfaW5kZXgpKQp9"},{"name":"remove-node-text.js","aliases":["rmnt.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"prevent-canvas.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"multiup.js","aliases":[],"kind":{"mime":"application/javascript"},"content":"ewogIGNvbnN0IGFyZ3MgPSBbInt7MX19IiwgInt7Mn19IiwgInt7M319IiwgInt7NH19IiwgInt7NX19IiwgInt7Nn19IiwgInt7N319IiwgInt7OH19IiwgInt7OX19Il07CiAgbGV0IGxhc3RfYXJnX2luZGV4ID0gMDsKICBmb3IgKGNvbnN0IGFyZ19pbmRleCBpbiBhcmdzKSB7CiAgICBpZiAoYXJnc1thcmdfaW5kZXhdID09PSAne3snICsgKE51bWJlcihhcmdfaW5kZXgpICsgMSkgKyAnfX0nKSB7CiAgICAgIGJyZWFrOwogICAgfQogICAgbGFzdF9hcmdfaW5kZXggKz0gMTsKICB9CiAgCiAgKGZ1bmN0aW9uIG11bHRpdXAoKSB7CiAgICBjb25zdCBoYW5kbGVyID0gZXYgPT4gewogICAgICAgIGNvbnN0IHRhcmdldCA9IGV2LnRhcmdldDsKICAgICAgICBpZiAoIHRhcmdldC5tYXRjaGVzKCdidXR0b25bbGlua10nKSA9PT0gZmFsc2UgKSB7IHJldHVybjsgfQogICAgICAgIGNvbnN0IGFuY2VzdG9yID0gdGFyZ2V0LmNsb3Nlc3QoJ2Zvcm0nKTsKICAgICAgICBpZiAoIGFuY2VzdG9yID09PSBudWxsICkgeyByZXR1cm47IH0KICAgICAgICBpZiAoIGFuY2VzdG9yICE9PSB0YXJnZXQucGFyZW50RWxlbWVudCApIHsgcmV0dXJuOyB9CiAgICAgICAgY29uc3QgbGluayA9ICh0YXJnZXQuZ2V0QXR0cmlidXRlKCdsaW5rJykgfHwgJycpLnRyaW0oKTsKICAgICAgICBpZiAoIGxpbmsgPT09ICcnICkgeyByZXR1cm47IH0KICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBsaW5rOwogICAgfTsKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlciwgeyBjYXB0dXJlOiB0cnVlIH0pOwp9KSguLi5hcmdzLnNsaWNlKDAsIGxhc3RfYXJnX2luZGV4KSkKfQ=="},{"name":"trusted-replace-node-text.js","aliases":["trusted-rpnt.js","replace-node-text.js","rpnt.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-set-constant.js","aliases":["trusted-set.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-replace-fetch-response.js","aliases":["trusted-rpfr.js"],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-replace-xhr-response.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-click-element.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-prune-inbound-object.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-prune-outbound-object.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-replace-argument.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-replace-outbound-text.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-suppress-native-method.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-prevent-xhr.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-prevent-dom-bypass.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""},{"name":"trusted-override-element-method.js","aliases":[],"kind":{"mime":"application/javascript"},"content":""}]